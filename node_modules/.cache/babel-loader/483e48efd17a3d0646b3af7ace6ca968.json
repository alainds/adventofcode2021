{"ast":null,"code":"import { input } from \"data/input8\";\nconst dataBrut = input.split(\"\\n\");\nconst commandes = dataBrut.map(a => {\n  const b = a.split(\" \");\n  return {\n    nom: b[0],\n    valeur: b[1]\n  };\n});\nconst ACC = \"acc\";\nconst NOP = \"nop\";\nconst JMP = \"jmp\";\n\nfunction result1() {\n  return getAccumulator(commandes).accumulator;\n}\n\nfunction result2() {\n  let reponses;\n\n  for (let i = 0; i < commandes.length; i++) {\n    const commandesNew = [...commandes];\n\n    if ([JMP, NOP].includes(commandesNew[i].nom)) {\n      commandesNew[i] = commandesNew[i].nom === NOP ? {\n        nom: JMP,\n        valeur: commandesNew[i].valeur\n      } : {\n        nom: NOP,\n        valeur: commandesNew[i].valeur\n      };\n    }\n\n    reponses = getAccumulator(commandesNew);\n    if (reponses.isTermine) break;\n  }\n\n  return reponses.accumulator;\n}\n\nfunction getAccumulator(commandes) {\n  let accumulator = 0;\n  let indexCourant = 0;\n  let commandesSuite = [];\n  let isTermine = false;\n\n  while (true) {\n    const commandeCourante = commandes[indexCourant];\n\n    if (!commandesSuite.includes(commandeCourante)) {\n      commandesSuite.push(commandeCourante);\n      accumulator = [ACC].includes(commandeCourante.nom) ? accumulator + commandeCourante.valeur * 1 : accumulator;\n      indexCourant = [ACC, NOP].includes(commandeCourante.nom) ? indexCourant + 1 : indexCourant + commandeCourante.valeur * 1;\n      isTermine = [ACC].includes(commandeCourante.nom) && indexCourant === commandes.length - 1;\n      if (isTermine) return {\n        accumulator,\n        commandesSuite,\n        isTermine\n      };\n    } else {\n      break;\n    }\n  }\n\n  return {\n    accumulator,\n    commandesSuite,\n    isTermine\n  };\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour8.js"],"names":["input","dataBrut","split","commandes","map","a","b","nom","valeur","ACC","NOP","JMP","result1","getAccumulator","accumulator","result2","reponses","i","length","commandesNew","includes","isTermine","indexCourant","commandesSuite","commandeCourante","push","getResultats"],"mappings":"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","sourcesContent":["import { input } from \"data/input8\"\r\n\r\nconst dataBrut = input.split(\"\\n\")\r\nconst commandes = dataBrut.map((a) => {\r\n  const b = a.split(\" \")\r\n  return { nom: b[0], valeur: b[1] }\r\n})\r\n\r\nconst ACC = \"acc\"\r\nconst NOP = \"nop\"\r\nconst JMP = \"jmp\"\r\n\r\nfunction result1() {\r\n  return getAccumulator(commandes).accumulator\r\n}\r\n\r\nfunction result2() {\r\n  let reponses\r\n  for (let i = 0; i < commandes.length; i++) {\r\n    const commandesNew = [...commandes]\r\n    if ([JMP, NOP].includes(commandesNew[i].nom)) {\r\n      commandesNew[i] =\r\n        commandesNew[i].nom === NOP\r\n          ? { nom: JMP, valeur: commandesNew[i].valeur }\r\n          : { nom: NOP, valeur: commandesNew[i].valeur }\r\n    }\r\n    reponses = getAccumulator(commandesNew)\r\n    if (reponses.isTermine) break\r\n  }\r\n  return reponses.accumulator\r\n}\r\n\r\nfunction getAccumulator(commandes) {\r\n  let accumulator = 0\r\n  let indexCourant = 0\r\n  let commandesSuite = []\r\n  let isTermine = false\r\n  while (true) {\r\n    const commandeCourante = commandes[indexCourant]\r\n    if (!commandesSuite.includes(commandeCourante)) {\r\n      commandesSuite.push(commandeCourante)\r\n      accumulator = [ACC].includes(commandeCourante.nom)\r\n        ? accumulator + commandeCourante.valeur * 1\r\n        : accumulator\r\n      indexCourant = [ACC, NOP].includes(commandeCourante.nom)\r\n        ? indexCourant + 1\r\n        : indexCourant + commandeCourante.valeur * 1\r\n      isTermine =\r\n        [ACC].includes(commandeCourante.nom) &&\r\n        indexCourant === commandes.length - 1\r\n      if (isTermine) return { accumulator, commandesSuite, isTermine }\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n  return { accumulator, commandesSuite, isTermine }\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}