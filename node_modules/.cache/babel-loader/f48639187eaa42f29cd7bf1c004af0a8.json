{"ast":null,"code":"import { input } from \"data/input15\";\n\nfunction result1() {\n  return findNumberEnd();\n}\n\nfunction result2() {\n  //assez long sur le browser...\n  return findNumberEndOptimise(30000000);\n}\n\nfunction findNumberEnd(END = 2020) {\n  let numbers = input.split(\",\").map(a => parseInt(a));\n  let n = numbers.length;\n\n  while (n < END) {\n    const numberAvant = numbers[n - 1];\n    const numbersSansAvant = numbers.filter((a, i) => i !== n - 1);\n    const isOnce = !numbersSansAvant.includes(numberAvant);\n\n    if (isOnce) {\n      numbers.push(0);\n    } else {\n      numbers.push(n - numbersSansAvant.lastIndexOf(numberAvant) - 1);\n    }\n\n    n++;\n  }\n\n  return numbers[END - 1];\n}\n\nfunction findNumberEndOptimise(END = 2020) {\n  let numbers = input.split(\",\").map(a => parseInt(a));\n  let n = numbers.length + 1;\n  const lastPositions = {};\n  numbers.map((a, i) => lastPositions[a] = [i + 1]);\n  let numberAvant = numbers[numbers.length - 1];\n\n  while (n - 1 < END) {\n    const isNew = !lastPositions[numberAvant] || lastPositions[numberAvant].length < 2;\n\n    if (isNew) {\n      lastPositions[0].push(n);\n\n      if (lastPositions[0].length > 2) {\n        lastPositions[0].splice(0, 1);\n      }\n\n      numberAvant = 0;\n    } else {\n      let lastPosition = lastPositions[numberAvant][0];\n      numberAvant = n - 1 - lastPosition;\n\n      if (lastPositions[numberAvant]) {\n        lastPositions[numberAvant].push(n);\n      } else {\n        lastPositions[numberAvant] = [n];\n      }\n\n      if (lastPositions[numberAvant].length > 2) {\n        lastPositions[numberAvant].splice(0, 1);\n      }\n    }\n\n    n++;\n  }\n\n  return numberAvant;\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour15.js"],"names":["input","result1","findNumberEnd","result2","findNumberEndOptimise","END","numbers","split","map","a","parseInt","n","length","numberAvant","numbersSansAvant","filter","i","isOnce","includes","push","lastIndexOf","lastPositions","isNew","splice","lastPosition","getResultats"],"mappings":"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","sourcesContent":["import { input } from \"data/input15\"\r\n\r\nfunction result1() {\r\n  return findNumberEnd()\r\n}\r\n\r\nfunction result2() {\r\n  //assez long sur le browser...\r\n  return findNumberEndOptimise(30000000)\r\n}\r\nfunction findNumberEnd(END = 2020) {\r\n  let numbers = input.split(\",\").map((a) => parseInt(a))\r\n  let n = numbers.length\r\n  while (n < END) {\r\n    const numberAvant = numbers[n - 1]\r\n    const numbersSansAvant = numbers.filter((a, i) => i !== n - 1)\r\n    const isOnce = !numbersSansAvant.includes(numberAvant)\r\n    if (isOnce) {\r\n      numbers.push(0)\r\n    } else {\r\n      numbers.push(n - numbersSansAvant.lastIndexOf(numberAvant) - 1)\r\n    }\r\n    n++\r\n  }\r\n\r\n  return numbers[END - 1]\r\n}\r\n\r\nfunction findNumberEndOptimise(END = 2020) {\r\n  let numbers = input.split(\",\").map((a) => parseInt(a))\r\n  let n = numbers.length + 1\r\n  const lastPositions = {}\r\n  numbers.map((a, i) => (lastPositions[a] = [i + 1]))\r\n\r\n  let numberAvant = numbers[numbers.length - 1]\r\n  while (n - 1 < END) {\r\n    const isNew =\r\n      !lastPositions[numberAvant] || lastPositions[numberAvant].length < 2\r\n\r\n    if (isNew) {\r\n      lastPositions[0].push(n)\r\n      if (lastPositions[0].length > 2) {\r\n        lastPositions[0].splice(0, 1)\r\n      }\r\n      numberAvant = 0\r\n    } else {\r\n      let lastPosition = lastPositions[numberAvant][0]\r\n      numberAvant = n - 1 - lastPosition\r\n      if (lastPositions[numberAvant]) {\r\n        lastPositions[numberAvant].push(n)\r\n      } else {\r\n        lastPositions[numberAvant] = [n]\r\n      }\r\n      if (lastPositions[numberAvant].length > 2) {\r\n        lastPositions[numberAvant].splice(0, 1)\r\n      }\r\n    }\r\n    n++\r\n  }\r\n\r\n  return numberAvant\r\n}\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}