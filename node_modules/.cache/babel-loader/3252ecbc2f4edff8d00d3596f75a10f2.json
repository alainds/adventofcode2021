{"ast":null,"code":"import { input } from \"../data/input1\";\nimport { reducerSum } from \"util\";\nconst data = input.split(\"\\n\").map(i => parseInt(i));\n\nconst sommeIncrease = arr => arr.map((courant, i) => i >= 1 && arr[i - 1] < courant ? 1 : 0).reduce(reducerSum);\n\nfunction result1() {\n  return sommeIncrease(data);\n}\n\nfunction result2() {\n  const dataWindows = data.map((courant, i) => i < data.length - 2 && courant + data[i + 1] + data[i + 2]).filter(Boolean);\n  return sommeIncrease(dataWindows);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour1.js"],"names":["input","reducerSum","data","split","map","i","parseInt","sommeIncrease","arr","courant","reduce","result1","result2","dataWindows","length","filter","Boolean","getResultats"],"mappings":"AACA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,MAAMC,IAAI,GAAGF,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAuBC,CAAD,IAAOC,QAAQ,CAACD,CAAD,CAArC,CAAb;;AACA,MAAME,aAAa,GAAIC,GAAD,IAASA,GAAG,CAACJ,GAAJ,CAAQ,CAACK,OAAD,EAAUJ,CAAV,KAAgBA,CAAC,IAAE,CAAH,IAAQG,GAAG,CAACH,CAAC,GAAC,CAAH,CAAH,GAAWI,OAAnB,GAA6B,CAA7B,GAA+B,CAAvD,EAA0DC,MAA1D,CAAiET,UAAjE,CAA/B;;AAEA,SAASU,OAAT,GAAmB;AACjB,SAAOJ,aAAa,CAACL,IAAD,CAApB;AACD;;AACD,SAASU,OAAT,GAAmB;AAEjB,QAAMC,WAAW,GAAGX,IAAI,CAACE,GAAL,CAAS,CAACK,OAAD,EAAUJ,CAAV,KAAgBA,CAAC,GAAEH,IAAI,CAACY,MAAL,GAAc,CAAjB,IAAuBL,OAAO,GAAGP,IAAI,CAACG,CAAC,GAAC,CAAH,CAAd,GAAsBH,IAAI,CAACG,CAAC,GAAC,CAAH,CAA1E,EAAiFU,MAAjF,CAAwFC,OAAxF,CAApB;AACA,SACET,aAAa,CAACM,WAAD,CADf;AAGD;;AAED,eAAe,SAASI,YAAT,GAAwB;AACrC,SAAO,CAACN,OAAO,EAAR,EAAYC,OAAO,EAAnB,CAAP;AACD","sourcesContent":["\r\nimport { input } from \"../data/input1\"\r\nimport { reducerSum } from \"util\"\r\n\r\nconst data = input.split(\"\\n\").map((i) => parseInt(i))\r\nconst sommeIncrease = (arr) => arr.map((courant, i) => i>=1 && arr[i-1] < courant ? 1:0).reduce(reducerSum)\r\n\r\nfunction result1() {\r\n  return sommeIncrease(data)\r\n}\r\nfunction result2() {\r\n\r\n  const dataWindows = data.map((courant, i) => i<(data.length - 2) && courant + data[i+1] + data[i+2]).filter(Boolean)\r\n  return (\r\n    sommeIncrease(dataWindows)\r\n  )\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}