{"ast":null,"code":"// import { reducerSum } from \"util\"\nimport { input } from \"../data/input1\"; // const input = ''\n\nconst data = input.split(\"\\n\").map(i => parseInt(i));\n\nfunction result1() {\n  const dataFin = data.map((courant, i) => i >= 1 && data[i - 1] < courant ? 1 : 0);\n  console.log(dataFin);\n  const result = dataFin.reduce((accumulator, currentValue) => accumulator + currentValue);\n  return result;\n}\n\nfunction result2() {\n  let resultatFinal = 0;\n  const dataWindows = data.map((courant, i) => i < data.length - 3 && data[i] + data[i] + data[i + 2]);\n  console.log(dataWindows);\n  return resultatFinal;\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour1.js"],"names":["input","data","split","map","i","parseInt","result1","dataFin","courant","console","log","result","reduce","accumulator","currentValue","result2","resultatFinal","dataWindows","length","getResultats"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB,C,CACA;;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAuBC,CAAD,IAAOC,QAAQ,CAACD,CAAD,CAArC,CAAb;;AAEA,SAASE,OAAT,GAAmB;AACjB,QAAMC,OAAO,GAAGN,IAAI,CAACE,GAAL,CAAS,CAACK,OAAD,EAAUJ,CAAV,KAAgBA,CAAC,IAAE,CAAH,IAAQH,IAAI,CAACG,CAAC,GAAC,CAAH,CAAJ,GAAYI,OAApB,GAA8B,CAA9B,GAAgC,CAAzD,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,QAAMI,MAAM,GAAGJ,OAAO,CAACK,MAAR,CAAe,CAACC,WAAD,EAAcC,YAAd,KAC9BD,WAAW,GAAGC,YADC,CAAf;AAEA,SAAOH,MAAP;AACD;;AACD,SAASI,OAAT,GAAmB;AACjB,MAAIC,aAAa,GAAG,CAApB;AAEA,QAAMC,WAAW,GAAGhB,IAAI,CAACE,GAAL,CAAS,CAACK,OAAD,EAAUJ,CAAV,KAAgBA,CAAC,GAAEH,IAAI,CAACiB,MAAL,GAAc,CAAjB,IAAuBjB,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAACG,CAAD,CAAd,GAAoBH,IAAI,CAACG,CAAC,GAAC,CAAH,CAAxE,CAApB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACA,SACED,aADF;AAGD;;AAED,eAAe,SAASG,YAAT,GAAwB;AACrC,SAAO,CAACb,OAAO,EAAR,EAAYS,OAAO,EAAnB,CAAP;AACD","sourcesContent":["// import { reducerSum } from \"util\"\r\nimport { input } from \"../data/input1\"\r\n// const input = ''\r\nconst data = input.split(\"\\n\").map((i) => parseInt(i))\r\n\r\nfunction result1() {\r\n  const dataFin = data.map((courant, i) => i>=1 && data[i-1] < courant ? 1:0)\r\n  console.log(dataFin)\r\n  const result = dataFin.reduce((accumulator, currentValue) =>\r\n  accumulator + currentValue)\r\n  return result\r\n}\r\nfunction result2() {\r\n  let resultatFinal = 0\r\n\r\n  const dataWindows = data.map((courant, i) => i<(data.length - 3) && data[i] + data[i] + data[i+2])\r\n  console.log(dataWindows)\r\n  return (\r\n    resultatFinal\r\n  )\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}