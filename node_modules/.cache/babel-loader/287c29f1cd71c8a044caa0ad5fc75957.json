{"ast":null,"code":"import { input } from \"data/input24\"; //tres long ! Surtout qu'il y a 2 rendus... A corriger mais bon...\n\nfunction result1() {// const hex = getData()\n  // const blackTiles = getBlackTiles(hex)\n  // return blackTiles.length\n}\n\nfunction result2() {\n  const hex = getData();\n  let blackTiles = getBlackTiles(hex).map(addId);\n\n  for (let index = 0; index < 100; index++) {\n    blackTiles = getBlackTilesAfterOneDay(blackTiles);\n  }\n\n  return blackTiles.length;\n}\n\nfunction getBlackTilesAfterOneDay(blackTiles) {\n  const whiteTiles = [];\n\n  for (let index = 0; index < blackTiles.length; index++) {\n    const tile = blackTiles[index];\n    const adjacentTiles = getAdjacentTiles(tile);\n    const adjacentBlackTiles = adjacentTiles.filter(a => blackTiles.map(getId).includes(a.id));\n    const adjacentWhiteTiles = adjacentTiles.filter(a => !adjacentBlackTiles.map(getId).includes(a.id));\n    adjacentWhiteTiles.map(t => {\n      const indexWhite = whiteTiles.map(getId).indexOf(t.id);\n\n      if (indexWhite >= 0) {\n        whiteTiles[indexWhite] = { ...whiteTiles[indexWhite],\n          compt: whiteTiles[indexWhite].compt + 1\n        };\n      } else {\n        whiteTiles.push({ ...t,\n          compt: 1\n        });\n      }\n    });\n    blackTiles[index] = { ...blackTiles[index],\n      compt: adjacentBlackTiles.length\n    };\n  }\n\n  return whiteTiles.filter(a => a.compt === 2).concat(blackTiles.filter(a => a.compt === 1 || a.compt === 2));\n}\n\nfunction getId(a) {\n  return a.id;\n}\n\nfunction addId(t) {\n  return {\n    id: \"x\" + t.x + \"y\" + t.y,\n    ...t\n  };\n}\n\nfunction getAdjacentTiles(tile) {\n  const {\n    x,\n    y\n  } = tile;\n  return [{\n    x: x + 1,\n    y: y + 1\n  }, {\n    x,\n    y: y + 2\n  }, {\n    x: x - 1,\n    y: y + 1\n  }, {\n    x: x - 1,\n    y: y - 1\n  }, {\n    x,\n    y: y - 2\n  }, {\n    x: x + 1,\n    y: y - 1\n  }].map(addId);\n}\n\nfunction getBlackTiles(hex) {\n  return countTiles(hex).filter(a => a.compt % 2 === 1).map(a => {\n    return { ...a.coor\n    };\n  });\n}\n\nfunction countTiles(hex) {\n  const compt = [];\n  hex.map((a, i) => {\n    if (i > 0 && coorEquals(a, hex[i - 1])) {\n      const lastCompt = compt.pop();\n      compt.push({\n        coor: a,\n        compt: lastCompt.compt + 1\n      });\n    } else {\n      compt.push({\n        coor: a,\n        compt: 1\n      });\n    }\n  });\n  return compt;\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}\n\nfunction coorEquals(a, b) {\n  return a.x === b.x && a.y === b.y;\n}\n\nfunction getData() {\n  // const VALUES = [\"ne\", \"nw\", \"se\", \"sw\"]\n  return input.split(\"\\n\").map(row => {\n    let result = [];\n\n    while (row !== \"\") {\n      const value2 = row.substr(0, 2);\n      const value1 = row.substr(0, 1);\n\n      if (value1 === \"n\" || value1 === \"s\") {\n        result.push(value2);\n        row = row.substring(2);\n      } else {\n        result.push(value1);\n        row = row.substring(1);\n      }\n    }\n\n    return result;\n  }).map(a => getCoordonnees(a)).sort((a, b) => a.y > b.y ? 1 : -1).sort((a, b) => a.x > b.x ? 1 : -1);\n}\n\nfunction getCoordonnees(tileInLine) {\n  let coor = {\n    x: 0,\n    y: 0\n  };\n\n  for (let index = 0; index < tileInLine.length; index++) {\n    const element = tileInLine[index];\n\n    switch (element) {\n      case \"e\":\n        coor.x = coor.x + 1;\n        coor.y = coor.y + 1;\n        break;\n\n      case \"ne\":\n        coor.y = coor.y + 2;\n        break;\n\n      case \"nw\":\n        coor.x = coor.x - 1;\n        coor.y = coor.y + 1;\n        break;\n\n      case \"w\":\n        coor.x = coor.x - 1;\n        coor.y = coor.y - 1;\n        break;\n\n      case \"sw\":\n        coor.y = coor.y - 2;\n        break;\n\n      case \"se\":\n        coor.x = coor.x + 1;\n        coor.y = coor.y - 1;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return coor;\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour24.js"],"names":["input","result1","result2","hex","getData","blackTiles","getBlackTiles","map","addId","index","getBlackTilesAfterOneDay","length","whiteTiles","tile","adjacentTiles","getAdjacentTiles","adjacentBlackTiles","filter","a","getId","includes","id","adjacentWhiteTiles","t","indexWhite","indexOf","compt","push","concat","x","y","countTiles","coor","i","coorEquals","lastCompt","pop","getResultats","b","split","row","result","value2","substr","value1","substring","getCoordonnees","sort","tileInLine","element"],"mappings":"AAAA,SAASA,KAAT,QAAsB,cAAtB,C,CAEA;;AACA,SAASC,OAAT,GAAmB,CACjB;AACA;AACA;AACD;;AAED,SAASC,OAAT,GAAmB;AACjB,QAAMC,GAAG,GAAGC,OAAO,EAAnB;AACA,MAAIC,UAAU,GAAGC,aAAa,CAACH,GAAD,CAAb,CAAmBI,GAAnB,CAAuBC,KAAvB,CAAjB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,GAA5B,EAAiCA,KAAK,EAAtC,EAA0C;AACxCJ,IAAAA,UAAU,GAAGK,wBAAwB,CAACL,UAAD,CAArC;AACD;;AACD,SAAOA,UAAU,CAACM,MAAlB;AACD;;AAED,SAASD,wBAAT,CAAkCL,UAAlC,EAA8C;AAC5C,QAAMO,UAAU,GAAG,EAAnB;;AACA,OAAK,IAAIH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGJ,UAAU,CAACM,MAAvC,EAA+CF,KAAK,EAApD,EAAwD;AACtD,UAAMI,IAAI,GAAGR,UAAU,CAACI,KAAD,CAAvB;AACA,UAAMK,aAAa,GAAGC,gBAAgB,CAACF,IAAD,CAAtC;AACA,UAAMG,kBAAkB,GAAGF,aAAa,CAACG,MAAd,CAAsBC,CAAD,IAC9Cb,UAAU,CAACE,GAAX,CAAeY,KAAf,EAAsBC,QAAtB,CAA+BF,CAAC,CAACG,EAAjC,CADyB,CAA3B;AAGA,UAAMC,kBAAkB,GAAGR,aAAa,CAACG,MAAd,CACxBC,CAAD,IAAO,CAACF,kBAAkB,CAACT,GAAnB,CAAuBY,KAAvB,EAA8BC,QAA9B,CAAuCF,CAAC,CAACG,EAAzC,CADiB,CAA3B;AAGAC,IAAAA,kBAAkB,CAACf,GAAnB,CAAwBgB,CAAD,IAAO;AAC5B,YAAMC,UAAU,GAAGZ,UAAU,CAACL,GAAX,CAAeY,KAAf,EAAsBM,OAAtB,CAA8BF,CAAC,CAACF,EAAhC,CAAnB;;AACA,UAAIG,UAAU,IAAI,CAAlB,EAAqB;AACnBZ,QAAAA,UAAU,CAACY,UAAD,CAAV,GAAyB,EACvB,GAAGZ,UAAU,CAACY,UAAD,CADU;AAEvBE,UAAAA,KAAK,EAAEd,UAAU,CAACY,UAAD,CAAV,CAAuBE,KAAvB,GAA+B;AAFf,SAAzB;AAID,OALD,MAKO;AACLd,QAAAA,UAAU,CAACe,IAAX,CAAgB,EACd,GAAGJ,CADW;AAEdG,UAAAA,KAAK,EAAE;AAFO,SAAhB;AAID;AACF,KAbD;AAcArB,IAAAA,UAAU,CAACI,KAAD,CAAV,GAAoB,EAClB,GAAGJ,UAAU,CAACI,KAAD,CADK;AAElBiB,MAAAA,KAAK,EAAEV,kBAAkB,CAACL;AAFR,KAApB;AAID;;AACD,SAAOC,UAAU,CACdK,MADI,CACIC,CAAD,IAAOA,CAAC,CAACQ,KAAF,KAAY,CADtB,EAEJE,MAFI,CAEGvB,UAAU,CAACY,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAACQ,KAAF,KAAY,CAAZ,IAAiBR,CAAC,CAACQ,KAAF,KAAY,CAAtD,CAFH,CAAP;AAGD;;AAED,SAASP,KAAT,CAAeD,CAAf,EAAkB;AAChB,SAAOA,CAAC,CAACG,EAAT;AACD;;AACD,SAASb,KAAT,CAAee,CAAf,EAAkB;AAChB,SAAO;AAAEF,IAAAA,EAAE,EAAE,MAAME,CAAC,CAACM,CAAR,GAAY,GAAZ,GAAkBN,CAAC,CAACO,CAA1B;AAA6B,OAAGP;AAAhC,GAAP;AACD;;AAED,SAASR,gBAAT,CAA0BF,IAA1B,EAAgC;AAC9B,QAAM;AAAEgB,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAWjB,IAAjB;AACA,SAAO,CACL;AAAEgB,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GADK,EAEL;AAAED,IAAAA,CAAF;AAAKC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAZ,GAFK,EAGL;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GAHK,EAIL;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GAJK,EAKL;AAAED,IAAAA,CAAF;AAAKC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAZ,GALK,EAML;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GANK,EAOLvB,GAPK,CAODC,KAPC,CAAP;AAQD;;AAED,SAASF,aAAT,CAAuBH,GAAvB,EAA4B;AAC1B,SAAO4B,UAAU,CAAC5B,GAAD,CAAV,CACJc,MADI,CACIC,CAAD,IAAOA,CAAC,CAACQ,KAAF,GAAU,CAAV,KAAgB,CAD1B,EAEJnB,GAFI,CAECW,CAAD,IAAO;AACV,WAAO,EAAE,GAAGA,CAAC,CAACc;AAAP,KAAP;AACD,GAJI,CAAP;AAKD;;AAED,SAASD,UAAT,CAAoB5B,GAApB,EAAyB;AACvB,QAAMuB,KAAK,GAAG,EAAd;AACAvB,EAAAA,GAAG,CAACI,GAAJ,CAAQ,CAACW,CAAD,EAAIe,CAAJ,KAAU;AAChB,QAAIA,CAAC,GAAG,CAAJ,IAASC,UAAU,CAAChB,CAAD,EAAIf,GAAG,CAAC8B,CAAC,GAAG,CAAL,CAAP,CAAvB,EAAwC;AACtC,YAAME,SAAS,GAAGT,KAAK,CAACU,GAAN,EAAlB;AACAV,MAAAA,KAAK,CAACC,IAAN,CAAW;AAAEK,QAAAA,IAAI,EAAEd,CAAR;AAAWQ,QAAAA,KAAK,EAAES,SAAS,CAACT,KAAV,GAAkB;AAApC,OAAX;AACD,KAHD,MAGO;AACLA,MAAAA,KAAK,CAACC,IAAN,CAAW;AAAEK,QAAAA,IAAI,EAAEd,CAAR;AAAWQ,QAAAA,KAAK,EAAE;AAAlB,OAAX;AACD;AACF,GAPD;AAQA,SAAOA,KAAP;AACD;;AACD,eAAe,SAASW,YAAT,GAAwB;AACrC,SAAO,CAACpC,OAAO,EAAR,EAAYC,OAAO,EAAnB,CAAP;AACD;;AACD,SAASgC,UAAT,CAAoBhB,CAApB,EAAuBoB,CAAvB,EAA0B;AACxB,SAAOpB,CAAC,CAACW,CAAF,KAAQS,CAAC,CAACT,CAAV,IAAeX,CAAC,CAACY,CAAF,KAAQQ,CAAC,CAACR,CAAhC;AACD;;AACD,SAAS1B,OAAT,GAAmB;AACjB;AACA,SAAOJ,KAAK,CACTuC,KADI,CACE,IADF,EAEJhC,GAFI,CAECiC,GAAD,IAAS;AACZ,QAAIC,MAAM,GAAG,EAAb;;AACA,WAAOD,GAAG,KAAK,EAAf,EAAmB;AACjB,YAAME,MAAM,GAAGF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAf;AACA,YAAMC,MAAM,GAAGJ,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAf;;AACA,UAAIC,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCH,QAAAA,MAAM,CAACd,IAAP,CAAYe,MAAZ;AACAF,QAAAA,GAAG,GAAGA,GAAG,CAACK,SAAJ,CAAc,CAAd,CAAN;AACD,OAHD,MAGO;AACLJ,QAAAA,MAAM,CAACd,IAAP,CAAYiB,MAAZ;AACAJ,QAAAA,GAAG,GAAGA,GAAG,CAACK,SAAJ,CAAc,CAAd,CAAN;AACD;AACF;;AACD,WAAOJ,MAAP;AACD,GAhBI,EAiBJlC,GAjBI,CAiBCW,CAAD,IAAO4B,cAAc,CAAC5B,CAAD,CAjBrB,EAkBJ6B,IAlBI,CAkBC,CAAC7B,CAAD,EAAIoB,CAAJ,KAAWpB,CAAC,CAACY,CAAF,GAAMQ,CAAC,CAACR,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAlB7B,EAmBJiB,IAnBI,CAmBC,CAAC7B,CAAD,EAAIoB,CAAJ,KAAWpB,CAAC,CAACW,CAAF,GAAMS,CAAC,CAACT,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAnB7B,CAAP;AAoBD;;AAED,SAASiB,cAAT,CAAwBE,UAAxB,EAAoC;AAClC,MAAIhB,IAAI,GAAG;AAAEH,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAX;;AACA,OAAK,IAAIrB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGuC,UAAU,CAACrC,MAAvC,EAA+CF,KAAK,EAApD,EAAwD;AACtD,UAAMwC,OAAO,GAAGD,UAAU,CAACvC,KAAD,CAA1B;;AACA,YAAQwC,OAAR;AACE,WAAK,GAAL;AACEjB,QAAAA,IAAI,CAACH,CAAL,GAASG,IAAI,CAACH,CAAL,GAAS,CAAlB;AACAG,QAAAA,IAAI,CAACF,CAAL,GAASE,IAAI,CAACF,CAAL,GAAS,CAAlB;AACA;;AACF,WAAK,IAAL;AACEE,QAAAA,IAAI,CAACF,CAAL,GAASE,IAAI,CAACF,CAAL,GAAS,CAAlB;AACA;;AACF,WAAK,IAAL;AACEE,QAAAA,IAAI,CAACH,CAAL,GAASG,IAAI,CAACH,CAAL,GAAS,CAAlB;AACAG,QAAAA,IAAI,CAACF,CAAL,GAASE,IAAI,CAACF,CAAL,GAAS,CAAlB;AACA;;AACF,WAAK,GAAL;AACEE,QAAAA,IAAI,CAACH,CAAL,GAASG,IAAI,CAACH,CAAL,GAAS,CAAlB;AACAG,QAAAA,IAAI,CAACF,CAAL,GAASE,IAAI,CAACF,CAAL,GAAS,CAAlB;AACA;;AACF,WAAK,IAAL;AACEE,QAAAA,IAAI,CAACF,CAAL,GAASE,IAAI,CAACF,CAAL,GAAS,CAAlB;AACA;;AACF,WAAK,IAAL;AACEE,QAAAA,IAAI,CAACH,CAAL,GAASG,IAAI,CAACH,CAAL,GAAS,CAAlB;AACAG,QAAAA,IAAI,CAACF,CAAL,GAASE,IAAI,CAACF,CAAL,GAAS,CAAlB;AACA;;AAEF;AACE;AAzBJ;AA2BD;;AACD,SAAOE,IAAP;AACD","sourcesContent":["import { input } from \"data/input24\"\r\n\r\n//tres long ! Surtout qu'il y a 2 rendus... A corriger mais bon...\r\nfunction result1() {\r\n  // const hex = getData()\r\n  // const blackTiles = getBlackTiles(hex)\r\n  // return blackTiles.length\r\n}\r\n\r\nfunction result2() {\r\n  const hex = getData()\r\n  let blackTiles = getBlackTiles(hex).map(addId)\r\n  for (let index = 0; index < 100; index++) {\r\n    blackTiles = getBlackTilesAfterOneDay(blackTiles)\r\n  }\r\n  return blackTiles.length\r\n}\r\n\r\nfunction getBlackTilesAfterOneDay(blackTiles) {\r\n  const whiteTiles = []\r\n  for (let index = 0; index < blackTiles.length; index++) {\r\n    const tile = blackTiles[index]\r\n    const adjacentTiles = getAdjacentTiles(tile)\r\n    const adjacentBlackTiles = adjacentTiles.filter((a) =>\r\n      blackTiles.map(getId).includes(a.id)\r\n    )\r\n    const adjacentWhiteTiles = adjacentTiles.filter(\r\n      (a) => !adjacentBlackTiles.map(getId).includes(a.id)\r\n    )\r\n    adjacentWhiteTiles.map((t) => {\r\n      const indexWhite = whiteTiles.map(getId).indexOf(t.id)\r\n      if (indexWhite >= 0) {\r\n        whiteTiles[indexWhite] = {\r\n          ...whiteTiles[indexWhite],\r\n          compt: whiteTiles[indexWhite].compt + 1,\r\n        }\r\n      } else {\r\n        whiteTiles.push({\r\n          ...t,\r\n          compt: 1,\r\n        })\r\n      }\r\n    })\r\n    blackTiles[index] = {\r\n      ...blackTiles[index],\r\n      compt: adjacentBlackTiles.length,\r\n    }\r\n  }\r\n  return whiteTiles\r\n    .filter((a) => a.compt === 2)\r\n    .concat(blackTiles.filter((a) => a.compt === 1 || a.compt === 2))\r\n}\r\n\r\nfunction getId(a) {\r\n  return a.id\r\n}\r\nfunction addId(t) {\r\n  return { id: \"x\" + t.x + \"y\" + t.y, ...t }\r\n}\r\n\r\nfunction getAdjacentTiles(tile) {\r\n  const { x, y } = tile\r\n  return [\r\n    { x: x + 1, y: y + 1 },\r\n    { x, y: y + 2 },\r\n    { x: x - 1, y: y + 1 },\r\n    { x: x - 1, y: y - 1 },\r\n    { x, y: y - 2 },\r\n    { x: x + 1, y: y - 1 },\r\n  ].map(addId)\r\n}\r\n\r\nfunction getBlackTiles(hex) {\r\n  return countTiles(hex)\r\n    .filter((a) => a.compt % 2 === 1)\r\n    .map((a) => {\r\n      return { ...a.coor }\r\n    })\r\n}\r\n\r\nfunction countTiles(hex) {\r\n  const compt = []\r\n  hex.map((a, i) => {\r\n    if (i > 0 && coorEquals(a, hex[i - 1])) {\r\n      const lastCompt = compt.pop()\r\n      compt.push({ coor: a, compt: lastCompt.compt + 1 })\r\n    } else {\r\n      compt.push({ coor: a, compt: 1 })\r\n    }\r\n  })\r\n  return compt\r\n}\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\nfunction coorEquals(a, b) {\r\n  return a.x === b.x && a.y === b.y\r\n}\r\nfunction getData() {\r\n  // const VALUES = [\"ne\", \"nw\", \"se\", \"sw\"]\r\n  return input\r\n    .split(\"\\n\")\r\n    .map((row) => {\r\n      let result = []\r\n      while (row !== \"\") {\r\n        const value2 = row.substr(0, 2)\r\n        const value1 = row.substr(0, 1)\r\n        if (value1 === \"n\" || value1 === \"s\") {\r\n          result.push(value2)\r\n          row = row.substring(2)\r\n        } else {\r\n          result.push(value1)\r\n          row = row.substring(1)\r\n        }\r\n      }\r\n      return result\r\n    })\r\n    .map((a) => getCoordonnees(a))\r\n    .sort((a, b) => (a.y > b.y ? 1 : -1))\r\n    .sort((a, b) => (a.x > b.x ? 1 : -1))\r\n}\r\n\r\nfunction getCoordonnees(tileInLine) {\r\n  let coor = { x: 0, y: 0 }\r\n  for (let index = 0; index < tileInLine.length; index++) {\r\n    const element = tileInLine[index]\r\n    switch (element) {\r\n      case \"e\":\r\n        coor.x = coor.x + 1\r\n        coor.y = coor.y + 1\r\n        break\r\n      case \"ne\":\r\n        coor.y = coor.y + 2\r\n        break\r\n      case \"nw\":\r\n        coor.x = coor.x - 1\r\n        coor.y = coor.y + 1\r\n        break\r\n      case \"w\":\r\n        coor.x = coor.x - 1\r\n        coor.y = coor.y - 1\r\n        break\r\n      case \"sw\":\r\n        coor.y = coor.y - 2\r\n        break\r\n      case \"se\":\r\n        coor.x = coor.x + 1\r\n        coor.y = coor.y - 1\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n  return coor\r\n}\r\n"]},"metadata":{},"sourceType":"module"}