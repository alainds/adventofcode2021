{"ast":null,"code":"import { input } from \"data/input11\";\nimport { reducerSum } from \"util/array\";\nconst dataBrut = input.split(\"\\n\");\nconst seatsInput = dataBrut.map(row => row.split(\"\"));\n\nfunction result1() {\n  return getNbOccupied(seatsInput, countAdjacent);\n}\n\nfunction result2() {\n  return getNbOccupied(seatsInput, countAdjacentAllDirection, 5);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}\n\nconst getNbOccupied = (seats, countFunction, nombreMax) => getSeatsTransformed(seats, countFunction, nombreMax).map(r => r.filter(s => isOccupied(s)).length).reduce(reducerSum);\n\nconst getSeatsTransformed = (seats, countFunction, nombreMax) => {\n  let allSeats;\n  let seatsTransformed = [...seats];\n\n  do {\n    allSeats = [...seatsTransformed];\n    seatsTransformed = transformSeats(allSeats, countFunction, nombreMax);\n  } while (isDifferentValues(allSeats, seatsTransformed));\n\n  return seatsTransformed;\n};\n\nconst isDifferentValues = (seats1, seats2) => {\n  for (let i = 0; i < seats1.length; i++) {\n    for (let j = 0; j < seats1[i].length; j++) {\n      if (seats1[i][j] !== seats2[i][j]) return true;\n    }\n  }\n\n  return false;\n};\n\nconst isVoid = seat => seat === \"L\";\n\nconst isOccupied = seat => seat === \"#\";\n\nconst isPoint = seat => seat === \".\";\n\nconst countAdjacent = (seats, i, j) => getAroundSeats(seats, i, j).filter(s => isOccupied(s)).length;\n\nconst countAdjacentAllDirection = (seats, i, j) => {\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  const adjacentsAllDirections = directions.map(d => {\n    let n = i + d[0];\n    let p = j + d[1];\n\n    while (n >= 0 && p >= 0 && n < seats.length && p < seats[i].length) {\n      if (seats[n][p] === \"L\") {\n        return false;\n      }\n\n      if (seats[n][p] === \"#\") {\n        return true;\n      } else {\n        n = n + d[0];\n        p = p + d[1];\n      }\n    }\n\n    return false;\n  });\n  return adjacentsAllDirections.reduce(reducerSum);\n};\n\nconst transformSeats = (seats, count = countAdjacent, nombreMax = 4) => seats.map((row, i) => row.map((seat, j) => {\n  let newSeat;\n  let a, b;\n\n  if (isPoint(seat)) {\n    newSeat = seat;\n  } else if (isVoid(seat)) {\n    b = count(seats, i, j);\n    newSeat = b === 0 ? \"#\" : seat;\n  } else if (isOccupied(seat)) {\n    a = count(seats, i, j);\n    newSeat = a >= nombreMax ? \"L\" : seat;\n  }\n\n  return newSeat;\n}));\n\nconst getAroundSeats = (seats, i, j) => {\n  const aroundSeats = [];\n\n  if (i > 0) {\n    aroundSeats.push(seats[i - 1][j]);\n    if (j > 0) aroundSeats.push(seats[i - 1][j - 1]);\n    if (j < seats[i].length - 1) aroundSeats.push(seats[i - 1][j + 1]);\n  }\n\n  if (i < seats.length - 1) {\n    if (j > 0) aroundSeats.push(seats[i + 1][j - 1]);\n    if (j < seats[i].length - 1) aroundSeats.push(seats[i + 1][j + 1]);\n    aroundSeats.push(seats[i + 1][j]);\n  }\n\n  if (j > 0) aroundSeats.push(seats[i][j - 1]);\n  if (j < seats[i].length - 1) aroundSeats.push(seats[i][j + 1]);\n  return aroundSeats;\n};","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour11.js"],"names":["input","reducerSum","dataBrut","split","seatsInput","map","row","result1","getNbOccupied","countAdjacent","result2","countAdjacentAllDirection","getResultats","seats","countFunction","nombreMax","getSeatsTransformed","r","filter","s","isOccupied","length","reduce","allSeats","seatsTransformed","transformSeats","isDifferentValues","seats1","seats2","i","j","isVoid","seat","isPoint","getAroundSeats","directions","adjacentsAllDirections","d","n","p","count","newSeat","a","b","aroundSeats","push"],"mappings":"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","sourcesContent":["import { input } from \"data/input11\"\r\nimport { reducerSum } from \"util/array\"\r\n\r\nconst dataBrut = input.split(\"\\n\")\r\nconst seatsInput = dataBrut.map((row) => row.split(\"\"))\r\nfunction result1() {\r\n  return getNbOccupied(seatsInput, countAdjacent)\r\n}\r\n\r\nfunction result2() {\r\n  return getNbOccupied(seatsInput, countAdjacentAllDirection, 5)\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n\r\nconst getNbOccupied = (seats, countFunction, nombreMax) =>\r\n  getSeatsTransformed(seats, countFunction, nombreMax)\r\n    .map((r) => r.filter((s) => isOccupied(s)).length)\r\n    .reduce(reducerSum)\r\n\r\nconst getSeatsTransformed = (seats, countFunction, nombreMax) => {\r\n  let allSeats\r\n  let seatsTransformed = [...seats]\r\n  do {\r\n    allSeats = [...seatsTransformed]\r\n    seatsTransformed = transformSeats(allSeats, countFunction, nombreMax)\r\n  } while (isDifferentValues(allSeats, seatsTransformed))\r\n  return seatsTransformed\r\n}\r\n\r\nconst isDifferentValues = (seats1, seats2) => {\r\n  for (let i = 0; i < seats1.length; i++) {\r\n    for (let j = 0; j < seats1[i].length; j++) {\r\n      if (seats1[i][j] !== seats2[i][j]) return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nconst isVoid = (seat) => seat === \"L\"\r\nconst isOccupied = (seat) => seat === \"#\"\r\nconst isPoint = (seat) => seat === \".\"\r\nconst countAdjacent = (seats, i, j) =>\r\n  getAroundSeats(seats, i, j).filter((s) => isOccupied(s)).length\r\n\r\nconst countAdjacentAllDirection = (seats, i, j) => {\r\n  const directions = [\r\n    [-1, -1],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -1],\r\n    [0, 1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n  ]\r\n  const adjacentsAllDirections = directions.map((d) => {\r\n    let n = i + d[0]\r\n    let p = j + d[1]\r\n    while (n >= 0 && p >= 0 && n < seats.length && p < seats[i].length) {\r\n      if (seats[n][p] === \"L\") {\r\n        return false\r\n      }\r\n      if (seats[n][p] === \"#\") {\r\n        return true\r\n      } else {\r\n        n = n + d[0]\r\n        p = p + d[1]\r\n      }\r\n    }\r\n    return false\r\n  })\r\n\r\n  return adjacentsAllDirections.reduce(reducerSum)\r\n}\r\n\r\nconst transformSeats = (seats, count = countAdjacent, nombreMax = 4) =>\r\n  seats.map((row, i) =>\r\n    row.map((seat, j) => {\r\n      let newSeat\r\n      let a, b\r\n      if (isPoint(seat)) {\r\n        newSeat = seat\r\n      } else if (isVoid(seat)) {\r\n        b = count(seats, i, j)\r\n        newSeat = b === 0 ? \"#\" : seat\r\n      } else if (isOccupied(seat)) {\r\n        a = count(seats, i, j)\r\n        newSeat = a >= nombreMax ? \"L\" : seat\r\n      }\r\n      return newSeat\r\n    })\r\n  )\r\nconst getAroundSeats = (seats, i, j) => {\r\n  const aroundSeats = []\r\n  if (i > 0) {\r\n    aroundSeats.push(seats[i - 1][j])\r\n    if (j > 0) aroundSeats.push(seats[i - 1][j - 1])\r\n    if (j < seats[i].length - 1) aroundSeats.push(seats[i - 1][j + 1])\r\n  }\r\n  if (i < seats.length - 1) {\r\n    if (j > 0) aroundSeats.push(seats[i + 1][j - 1])\r\n    if (j < seats[i].length - 1) aroundSeats.push(seats[i + 1][j + 1])\r\n    aroundSeats.push(seats[i + 1][j])\r\n  }\r\n  if (j > 0) aroundSeats.push(seats[i][j - 1])\r\n  if (j < seats[i].length - 1) aroundSeats.push(seats[i][j + 1])\r\n\r\n  return aroundSeats\r\n}\r\n"]},"metadata":{},"sourceType":"module"}