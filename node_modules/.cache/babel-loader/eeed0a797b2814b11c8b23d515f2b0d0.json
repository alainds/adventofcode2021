{"ast":null,"code":"import { input } from \"data/input17\";\nimport { reducerSum } from \"util/array\";\n\nfunction result1() {\n  const cubesInit = input.split(\"\\n\").map(a => a.split(\"\").map(c => c === \"#\" ? 1 : 0));\n  const NB_CYCLES = 6;\n  let cubes = constructCubes(cubesInit, NB_CYCLES);\n\n  for (let i = 0; i < NB_CYCLES; i++) {\n    cubes = transformCubes(cubes);\n  }\n\n  return cubes.flat(2).reduce(reducerSum);\n}\n\nfunction result2() {\n  const cubesInit = input.split(\"\\n\").map(a => a.split(\"\").map(c => c === \"#\" ? 1 : 0)); //flemme de parametriser la dimension : copie sale de code\n\n  const NB_CYCLES = 6;\n  let hypercubes = constructHyperCubes(cubesInit, NB_CYCLES);\n\n  for (let i = 0; i < NB_CYCLES; i++) {\n    hypercubes = transformHypercubes(hypercubes);\n  }\n\n  return hypercubes.flat(3).reduce(reducerSum);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}\n\nfunction countActiveNeighbours(cubes, coor) {\n  let count = 0;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let k = 0; k < 3; k++) {\n        if (!(i === 1 && j === 1 && k === 1) && cubes[-1 + i + coor.i] && cubes[-1 + i + coor.i][-1 + j + coor.j] && cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k]) {\n          count += cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k]; // if (Number.isNaN(count)) debugger\n        }\n      }\n    }\n  }\n\n  return count;\n}\n\nfunction countActiveNeighboursHypercube(cubes, coor) {\n  let count = 0;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let k = 0; k < 3; k++) {\n        for (let l = 0; l < 3; l++) {\n          if (!(i === 1 && j === 1 && k === 1 && l === 1) && cubes[-1 + i + coor.i] && cubes[-1 + i + coor.i][-1 + j + coor.j] && cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k] && cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k][-1 + l + coor.l]) {\n            count += cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k][-1 + l + coor.l];\n            if (Number.isNaN(count)) debugger;\n          }\n        }\n      }\n    }\n  }\n\n  return count;\n}\n\nfunction transformCubes(cubes) {\n  let cubesWithOneCycle = [];\n\n  for (let i = 0; i < cubes.length; i++) {\n    cubesWithOneCycle[i] = [];\n\n    for (let j = 0; j < cubes.length; j++) {\n      cubesWithOneCycle[i][j] = [];\n\n      for (let k = 0; k < cubes.length; k++) {\n        const coorCurrentCube = cubes[i][j][k];\n        const nbActiveNeighbours = countActiveNeighbours(cubes, {\n          i,\n          j,\n          k\n        });\n        cubesWithOneCycle[i][j][k] = coorCurrentCube === 0 && [3].includes(nbActiveNeighbours) || coorCurrentCube === 1 && [2, 3].includes(nbActiveNeighbours) ? 1 : 0;\n      }\n    }\n  }\n\n  return cubesWithOneCycle;\n}\n\nfunction transformHypercubes(cubes) {\n  let cubesWithOneCycle = [];\n\n  for (let i = 0; i < cubes.length; i++) {\n    cubesWithOneCycle[i] = [];\n\n    for (let j = 0; j < cubes.length; j++) {\n      cubesWithOneCycle[i][j] = [];\n\n      for (let k = 0; k < cubes.length; k++) {\n        cubesWithOneCycle[i][j][k] = [];\n\n        for (let l = 0; l < cubes.length; l++) {\n          const coorCurrentCube = cubes[i][j][k][l];\n          const nbActiveNeighbours = countActiveNeighboursHypercube(cubes, {\n            i,\n            j,\n            k,\n            l\n          });\n          cubesWithOneCycle[i][j][k][l] = coorCurrentCube === 0 && [3].includes(nbActiveNeighbours) || coorCurrentCube === 1 && [2, 3].includes(nbActiveNeighbours) ? 1 : 0;\n        }\n      }\n    }\n  }\n\n  return cubesWithOneCycle;\n}\n\nfunction constructHyperCubes(cubesInit, nbCicles) {\n  const finalDimension = cubesInit.length + nbCicles * 2;\n  const cubes = [];\n\n  for (let i = 0; i < finalDimension; i++) {\n    cubes[i] = [];\n\n    for (let j = 0; j < finalDimension; j++) {\n      cubes[i][j] = [];\n\n      for (let k = 0; k < finalDimension; k++) {\n        cubes[i][j][k] = [];\n\n        for (let l = 0; l < finalDimension; l++) {\n          const oldI = i - nbCicles;\n          const oldJ = j - nbCicles;\n\n          if (k === Math.trunc(finalDimension / 2) && l === Math.trunc(finalDimension / 2) && oldI >= 0 && oldI <= cubesInit.length - 1 && oldJ >= 0 && oldJ <= cubesInit.length - 1) {\n            cubes[i][j][k][l] = cubesInit[oldI][oldJ];\n          } else {\n            cubes[i][j][k][l] = 0;\n          }\n        }\n      }\n    }\n  }\n\n  return cubes;\n}\n\nfunction constructCubes(cubesInit, nbCicles) {\n  const finalDimension = cubesInit.length + nbCicles * 2;\n  const cubes = [];\n\n  for (let i = 0; i < finalDimension; i++) {\n    cubes[i] = [];\n\n    for (let j = 0; j < finalDimension; j++) {\n      cubes[i][j] = [];\n\n      for (let k = 0; k < finalDimension; k++) {\n        const oldI = i - nbCicles;\n        const oldJ = j - nbCicles;\n\n        if (k === Math.trunc(finalDimension / 2) && oldI >= 0 && oldI <= cubesInit.length - 1 && oldJ >= 0 && oldJ <= cubesInit.length - 1) {\n          cubes[i][j][k] = cubesInit[oldI][oldJ];\n        } else {\n          cubes[i][j][k] = 0;\n        }\n      }\n    }\n  }\n\n  return cubes;\n}\n\nfunction initArray(dimension) {\n  let array = new Array(dimension);\n  array[0] = new Array(dimension);\n  array[0][0] = new Array(dimension);\n  return array;\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour17.js"],"names":["input","reducerSum","result1","cubesInit","split","map","a","c","NB_CYCLES","cubes","constructCubes","i","transformCubes","flat","reduce","result2","hypercubes","constructHyperCubes","transformHypercubes","getResultats","countActiveNeighbours","coor","count","j","k","countActiveNeighboursHypercube","l","Number","isNaN","cubesWithOneCycle","length","coorCurrentCube","nbActiveNeighbours","includes","nbCicles","finalDimension","oldI","oldJ","Math","trunc","initArray","dimension","array","Array"],"mappings":"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","sourcesContent":["import { input } from \"data/input17\"\r\nimport { reducerSum } from \"util/array\"\r\n\r\nfunction result1() {\r\n  const cubesInit = input\r\n    .split(\"\\n\")\r\n    .map((a) => a.split(\"\").map((c) => (c === \"#\" ? 1 : 0)))\r\n  const NB_CYCLES = 6\r\n  let cubes = constructCubes(cubesInit, NB_CYCLES)\r\n  for (let i = 0; i < NB_CYCLES; i++) {\r\n    cubes = transformCubes(cubes)\r\n  }\r\n  return cubes.flat(2).reduce(reducerSum)\r\n}\r\n\r\nfunction result2() {\r\n  const cubesInit = input\r\n    .split(\"\\n\")\r\n    .map((a) => a.split(\"\").map((c) => (c === \"#\" ? 1 : 0)))\r\n  //flemme de parametriser la dimension : copie sale de code\r\n  const NB_CYCLES = 6\r\n  let hypercubes = constructHyperCubes(cubesInit, NB_CYCLES)\r\n  for (let i = 0; i < NB_CYCLES; i++) {\r\n    hypercubes = transformHypercubes(hypercubes)\r\n  }\r\n  return hypercubes.flat(3).reduce(reducerSum)\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n\r\nfunction countActiveNeighbours(cubes, coor) {\r\n  let count = 0\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      for (let k = 0; k < 3; k++) {\r\n        if (\r\n          !(i === 1 && j === 1 && k === 1) &&\r\n          cubes[-1 + i + coor.i] &&\r\n          cubes[-1 + i + coor.i][-1 + j + coor.j] &&\r\n          cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k]\r\n        ) {\r\n          count += cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k]\r\n          // if (Number.isNaN(count)) debugger\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\nfunction countActiveNeighboursHypercube(cubes, coor) {\r\n  let count = 0\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      for (let k = 0; k < 3; k++) {\r\n        for (let l = 0; l < 3; l++) {\r\n          if (\r\n            !(i === 1 && j === 1 && k === 1 && l === 1) &&\r\n            cubes[-1 + i + coor.i] &&\r\n            cubes[-1 + i + coor.i][-1 + j + coor.j] &&\r\n            cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k] &&\r\n            cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k][\r\n              -1 + l + coor.l\r\n            ]\r\n          ) {\r\n            count +=\r\n              cubes[-1 + i + coor.i][-1 + j + coor.j][-1 + k + coor.k][\r\n                -1 + l + coor.l\r\n              ]\r\n            if (Number.isNaN(count)) debugger\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\nfunction transformCubes(cubes) {\r\n  let cubesWithOneCycle = []\r\n  for (let i = 0; i < cubes.length; i++) {\r\n    cubesWithOneCycle[i] = []\r\n    for (let j = 0; j < cubes.length; j++) {\r\n      cubesWithOneCycle[i][j] = []\r\n      for (let k = 0; k < cubes.length; k++) {\r\n        const coorCurrentCube = cubes[i][j][k]\r\n        const nbActiveNeighbours = countActiveNeighbours(cubes, {\r\n          i,\r\n          j,\r\n          k,\r\n        })\r\n        cubesWithOneCycle[i][j][k] =\r\n          (coorCurrentCube === 0 && [3].includes(nbActiveNeighbours)) ||\r\n          (coorCurrentCube === 1 && [2, 3].includes(nbActiveNeighbours))\r\n            ? 1\r\n            : 0\r\n      }\r\n    }\r\n  }\r\n  return cubesWithOneCycle\r\n}\r\n\r\nfunction transformHypercubes(cubes) {\r\n  let cubesWithOneCycle = []\r\n  for (let i = 0; i < cubes.length; i++) {\r\n    cubesWithOneCycle[i] = []\r\n    for (let j = 0; j < cubes.length; j++) {\r\n      cubesWithOneCycle[i][j] = []\r\n      for (let k = 0; k < cubes.length; k++) {\r\n        cubesWithOneCycle[i][j][k] = []\r\n        for (let l = 0; l < cubes.length; l++) {\r\n          const coorCurrentCube = cubes[i][j][k][l]\r\n          const nbActiveNeighbours = countActiveNeighboursHypercube(cubes, {\r\n            i,\r\n            j,\r\n            k,\r\n            l,\r\n          })\r\n          cubesWithOneCycle[i][j][k][l] =\r\n            (coorCurrentCube === 0 && [3].includes(nbActiveNeighbours)) ||\r\n            (coorCurrentCube === 1 && [2, 3].includes(nbActiveNeighbours))\r\n              ? 1\r\n              : 0\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return cubesWithOneCycle\r\n}\r\n\r\nfunction constructHyperCubes(cubesInit, nbCicles) {\r\n  const finalDimension = cubesInit.length + nbCicles * 2\r\n  const cubes = []\r\n  for (let i = 0; i < finalDimension; i++) {\r\n    cubes[i] = []\r\n    for (let j = 0; j < finalDimension; j++) {\r\n      cubes[i][j] = []\r\n      for (let k = 0; k < finalDimension; k++) {\r\n        cubes[i][j][k] = []\r\n        for (let l = 0; l < finalDimension; l++) {\r\n          const oldI = i - nbCicles\r\n          const oldJ = j - nbCicles\r\n          if (\r\n            k === Math.trunc(finalDimension / 2) &&\r\n            l === Math.trunc(finalDimension / 2) &&\r\n            oldI >= 0 &&\r\n            oldI <= cubesInit.length - 1 &&\r\n            oldJ >= 0 &&\r\n            oldJ <= cubesInit.length - 1\r\n          ) {\r\n            cubes[i][j][k][l] = cubesInit[oldI][oldJ]\r\n          } else {\r\n            cubes[i][j][k][l] = 0\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return cubes\r\n}\r\n\r\nfunction constructCubes(cubesInit, nbCicles) {\r\n  const finalDimension = cubesInit.length + nbCicles * 2\r\n  const cubes = []\r\n  for (let i = 0; i < finalDimension; i++) {\r\n    cubes[i] = []\r\n    for (let j = 0; j < finalDimension; j++) {\r\n      cubes[i][j] = []\r\n      for (let k = 0; k < finalDimension; k++) {\r\n        const oldI = i - nbCicles\r\n        const oldJ = j - nbCicles\r\n        if (\r\n          k === Math.trunc(finalDimension / 2) &&\r\n          oldI >= 0 &&\r\n          oldI <= cubesInit.length - 1 &&\r\n          oldJ >= 0 &&\r\n          oldJ <= cubesInit.length - 1\r\n        ) {\r\n          cubes[i][j][k] = cubesInit[oldI][oldJ]\r\n        } else {\r\n          cubes[i][j][k] = 0\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return cubes\r\n}\r\n\r\nfunction initArray(dimension) {\r\n  let array = new Array(dimension)\r\n  array[0] = new Array(dimension)\r\n  array[0][0] = new Array(dimension)\r\n  return array\r\n}\r\n"]},"metadata":{},"sourceType":"module"}