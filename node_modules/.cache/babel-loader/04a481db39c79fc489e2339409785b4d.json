{"ast":null,"code":"// import { reducerSum } from \"util\"\nimport { input } from \"../data/input1\"; // const input = ''\n\nconst data = input.split(\"\\n\").map(i => parseInt(i));\nconst dataFin = data.map((courant, i) => i >= 1 && data[i - 1] < courant ? 1 : 0);\n\nfunction result1() {\n  console.log(dataFin);\n  const result = dataFin.reduce((accumulator, currentValue) => accumulator + currentValue);\n  return result;\n}\n\nfunction result2() {\n  let resultatFinal = [];\n  return resultatFinal[0] * resultatFinal[1] * (2020 - resultatFinal[0] - resultatFinal[1]);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour1.js"],"names":["input","data","split","map","i","parseInt","dataFin","courant","result1","console","log","result","reduce","accumulator","currentValue","result2","resultatFinal","getResultats"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB,C,CACA;;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAuBC,CAAD,IAAOC,QAAQ,CAACD,CAAD,CAArC,CAAb;AACA,MAAME,OAAO,GAAGL,IAAI,CAACE,GAAL,CAAS,CAACI,OAAD,EAAUH,CAAV,KAAgBA,CAAC,IAAE,CAAH,IAAQH,IAAI,CAACG,CAAC,GAAC,CAAH,CAAJ,GAAYG,OAApB,GAA8B,CAA9B,GAAgC,CAAzD,CAAhB;;AAEA,SAASC,OAAT,GAAmB;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,QAAMK,MAAM,GAAGL,OAAO,CAACM,MAAR,CAAe,CAACC,WAAD,EAAcC,YAAd,KAC9BD,WAAW,GAAGC,YADC,CAAf;AAEA,SAAOH,MAAP;AACD;;AACD,SAASI,OAAT,GAAmB;AACjB,MAAIC,aAAa,GAAG,EAApB;AACA,SACEA,aAAa,CAAC,CAAD,CAAb,GACAA,aAAa,CAAC,CAAD,CADb,IAEC,OAAOA,aAAa,CAAC,CAAD,CAApB,GAA0BA,aAAa,CAAC,CAAD,CAFxC,CADF;AAKD;;AAED,eAAe,SAASC,YAAT,GAAwB;AACrC,SAAO,CAACT,OAAO,EAAR,EAAYO,OAAO,EAAnB,CAAP;AACD","sourcesContent":["// import { reducerSum } from \"util\"\r\nimport { input } from \"../data/input1\"\r\n// const input = ''\r\nconst data = input.split(\"\\n\").map((i) => parseInt(i))\r\nconst dataFin = data.map((courant, i) => i>=1 && data[i-1] < courant ? 1:0)\r\n\r\nfunction result1() {\r\n  console.log(dataFin)\r\n  const result = dataFin.reduce((accumulator, currentValue) =>\r\n  accumulator + currentValue)\r\n  return result\r\n}\r\nfunction result2() {\r\n  let resultatFinal = []\r\n  return (\r\n    resultatFinal[0] *\r\n    resultatFinal[1] *\r\n    (2020 - resultatFinal[0] - resultatFinal[1])\r\n  )\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}