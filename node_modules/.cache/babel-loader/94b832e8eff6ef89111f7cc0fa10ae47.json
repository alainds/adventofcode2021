{"ast":null,"code":"import { input } from \"data/input4\";\nimport { reducerSum, reducerAnd } from \"util/array\";\nconst dataBrut = input.split(\"\\n\\n\");\n\nfunction result1() {\n  const passeports = dataBrut.map(c => c.split(/[\\s\\n]/g).map(a => a.split(\":\")));\n  const passeportsFields = passeports.map(pass => pass.map(a => a[0]).sort());\n  const validFields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"];\n  const passeportsValid = passeportsFields.map(fields => {\n    const isValid = validFields.every(r => fields.includes(r));\n    return isValid ? 1 : 0;\n  });\n  return passeportsValid.reduce(reducerSum);\n}\n\nfunction result2() {\n  const passeports = dataBrut.map(c => c.split(/[\\s\\n]/g).map(a => a.split(\":\")));\n  const validFields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"];\n  const passeportsFields = passeports.map(pass => pass.map(a => a[0]));\n  const passeportsValid1 = passeportsFields.map(fields => {\n    const isValid = validFields.every(r => fields.includes(r));\n    return isValid;\n  });\n  const passeportsValid2 = passeports.map(pass => pass.map(a => {\n    return isValidField(a);\n  }));\n  const passeportsValues = passeports.map((pass, indexPass) => {\n    const required = passeportsValid1[indexPass];\n    const valid = passeportsValid2[indexPass].reduce(reducerAnd);\n    return {\n      required,\n      valid,\n      validAndRequired: valid && required,\n      values: pass.map(a => {\n        return {\n          name: a[0],\n          value: a[1],\n          valid: isValidField(a)\n        };\n      })\n    };\n  });\n  return passeportsValues.map(a => a.validAndRequired).reduce(reducerSum);\n}\n\nfunction isValidField(field) {\n  let isValid = false;\n  const name = field[0];\n  const value = field[1];\n\n  const regexpDigits = digit => new RegExp(\"^[0-9]{\" + digit + \"}$\");\n\n  switch (name) {\n    case \"byr\":\n      const regexpByr = regexpDigits(4);\n      isValid = regexpByr.test(value) && value >= 1920 && value <= 2002;\n      break;\n\n    case \"iyr\":\n      const regexpIyr = regexpDigits(4);\n      isValid = regexpIyr.test(value) && value >= 2010 && value <= 2020;\n      break;\n\n    case \"eyr\":\n      const regexpEyr = regexpDigits(4);\n      isValid = regexpEyr.test(value) && value >= 2020 && value <= 2030;\n      break;\n\n    case \"hgt\":\n      const regexpHgt = new RegExp(\"^([0-9]*)(.{2})$\");\n      const hgtValue = regexpHgt.test(value) && regexpHgt.exec(value)[1];\n      const hgtType = regexpHgt.test(value) && regexpHgt.exec(value)[2];\n      isValid = regexpHgt.test(value) && (hgtType === \"cm\" && hgtValue >= 150 && hgtValue <= 193 || hgtType === \"in\" && hgtValue >= 59 && hgtValue <= 76);\n      break;\n\n    case \"hcl\":\n      const regexpHcl = new RegExp(\"^#[0-9a-f]{6}$\");\n      isValid = regexpHcl.test(value);\n      break;\n\n    case \"ecl\":\n      const regexpEcl = new RegExp(\"amb|blu|brn|gry|grn|hzl|oth\");\n      isValid = regexpEcl.test(value);\n      break;\n\n    case \"pid\":\n      const regexpPid = regexpDigits(9);\n      isValid = regexpPid.test(value);\n      break;\n\n    case \"cid\":\n      isValid = true;\n      break;\n\n    default:\n      isValid = false;\n      break;\n  }\n\n  return isValid;\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour4.js"],"names":["input","reducerSum","reducerAnd","dataBrut","split","result1","passeports","map","c","a","passeportsFields","pass","sort","validFields","passeportsValid","fields","isValid","every","r","includes","reduce","result2","passeportsValid1","passeportsValid2","isValidField","passeportsValues","indexPass","required","valid","validAndRequired","values","name","value","field","regexpDigits","digit","RegExp","regexpByr","test","regexpIyr","regexpEyr","regexpHgt","hgtValue","exec","hgtType","regexpHcl","regexpEcl","regexpPid","getResultats"],"mappings":"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","sourcesContent":["import { input } from \"data/input4\"\r\nimport { reducerSum, reducerAnd } from \"util/array\"\r\n\r\nconst dataBrut = input.split(\"\\n\\n\")\r\n\r\nfunction result1() {\r\n  const passeports = dataBrut.map((c) =>\r\n    c.split(/[\\s\\n]/g).map((a) => a.split(\":\"))\r\n  )\r\n  const passeportsFields = passeports.map((pass) =>\r\n    pass.map((a) => a[0]).sort()\r\n  )\r\n  const validFields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"]\r\n  const passeportsValid = passeportsFields.map((fields) => {\r\n    const isValid = validFields.every((r) => fields.includes(r))\r\n    return isValid ? 1 : 0\r\n  })\r\n\r\n  return passeportsValid.reduce(reducerSum)\r\n}\r\n\r\nfunction result2() {\r\n  const passeports = dataBrut.map((c) =>\r\n    c.split(/[\\s\\n]/g).map((a) => a.split(\":\"))\r\n  )\r\n  const validFields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"]\r\n  const passeportsFields = passeports.map((pass) => pass.map((a) => a[0]))\r\n  const passeportsValid1 = passeportsFields.map((fields) => {\r\n    const isValid = validFields.every((r) => fields.includes(r))\r\n    return isValid\r\n  })\r\n  const passeportsValid2 = passeports.map((pass) =>\r\n    pass.map((a) => {\r\n      return isValidField(a)\r\n    })\r\n  )\r\n  const passeportsValues = passeports.map((pass, indexPass) => {\r\n    const required = passeportsValid1[indexPass]\r\n    const valid = passeportsValid2[indexPass].reduce(reducerAnd)\r\n    return {\r\n      required,\r\n      valid,\r\n      validAndRequired: valid && required,\r\n      values: pass.map((a) => {\r\n        return { name: a[0], value: a[1], valid: isValidField(a) }\r\n      }),\r\n    }\r\n  })\r\n  return passeportsValues.map((a) => a.validAndRequired).reduce(reducerSum)\r\n}\r\n\r\nfunction isValidField(field) {\r\n  let isValid = false\r\n  const name = field[0]\r\n  const value = field[1]\r\n  const regexpDigits = (digit) => new RegExp(\"^[0-9]{\" + digit + \"}$\")\r\n  switch (name) {\r\n    case \"byr\":\r\n      const regexpByr = regexpDigits(4)\r\n      isValid = regexpByr.test(value) && value >= 1920 && value <= 2002\r\n      break\r\n    case \"iyr\":\r\n      const regexpIyr = regexpDigits(4)\r\n      isValid = regexpIyr.test(value) && value >= 2010 && value <= 2020\r\n      break\r\n    case \"eyr\":\r\n      const regexpEyr = regexpDigits(4)\r\n      isValid = regexpEyr.test(value) && value >= 2020 && value <= 2030\r\n      break\r\n    case \"hgt\":\r\n      const regexpHgt = new RegExp(\"^([0-9]*)(.{2})$\")\r\n      const hgtValue = regexpHgt.test(value) && regexpHgt.exec(value)[1]\r\n      const hgtType = regexpHgt.test(value) && regexpHgt.exec(value)[2]\r\n      isValid =\r\n        regexpHgt.test(value) &&\r\n        ((hgtType === \"cm\" && hgtValue >= 150 && hgtValue <= 193) ||\r\n          (hgtType === \"in\" && hgtValue >= 59 && hgtValue <= 76))\r\n      break\r\n    case \"hcl\":\r\n      const regexpHcl = new RegExp(\"^#[0-9a-f]{6}$\")\r\n      isValid = regexpHcl.test(value)\r\n      break\r\n    case \"ecl\":\r\n      const regexpEcl = new RegExp(\"amb|blu|brn|gry|grn|hzl|oth\")\r\n      isValid = regexpEcl.test(value)\r\n      break\r\n    case \"pid\":\r\n      const regexpPid = regexpDigits(9)\r\n      isValid = regexpPid.test(value)\r\n      break\r\n    case \"cid\":\r\n      isValid = true\r\n      break\r\n    default:\r\n      isValid = false\r\n      break\r\n  }\r\n  return isValid\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}