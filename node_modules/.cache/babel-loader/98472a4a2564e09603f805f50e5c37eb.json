{"ast":null,"code":"import { input } from \"data/input9\";\nconst nombresAll = input.split(\"\\n\").map(a => parseInt(a));\nconst N = 25;\nconst xmas = getNombreEtSommes(nombresAll, N);\n\nfunction result1() {\n  console.log(xmas.nombres);\n  console.log(xmas.sommes);\n  return getSommeKO(xmas).sommeKO;\n}\n\nfunction result2() {\n  const sommeKO = getSommeKO(xmas).sommeKO;\n  const suiteQuiFaitLaSomme = findSuite(nombresAll, sommeKO);\n  return Math.min(...suiteQuiFaitLaSomme) + Math.max(...suiteQuiFaitLaSomme);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}\n\nfunction isSommeOK(nombres, somme) {\n  const nombresPlusPetit = nombres.filter(n => n <= somme);\n  nombresPlusPetit.map((a, i) => a);\n  const complementSomme = nombresPlusPetit.map(i => somme - i);\n  const isComplementASomme = nombresPlusPetit.filter(i => complementSomme.includes(i));\n  return isComplementASomme.length > 0;\n}\n\nfunction getNombreEtSommes(nombres, N = 25) {\n  let nombresParN = [];\n\n  for (let i = N; i < nombres.length; i++) {\n    nombresParN.push([...nombres].splice(i - N, N));\n  }\n\n  let sommes = [...nombres].splice(N, [...nombres].length - N);\n  return {\n    nombres: nombresParN,\n    sommes\n  };\n}\n\nfunction getSommeKO(xmas) {\n  let sommeKO;\n  let indexKO;\n  xmas.sommes.some((somme, i) => {\n    indexKO = i;\n    const nombresAsommer = xmas.nombres[i];\n    sommeKO = !isSommeOK(nombresAsommer, somme) && somme;\n    return sommeKO;\n  });\n  return {\n    sommeKO,\n    indexKO\n  };\n}\n\nfunction findSuite(nombres, somme) {\n  let suiteATrouver;\n  nombres.some((n, i) => {\n    let sommeSuite = n;\n    let suite = [n];\n    let iSuite = i;\n\n    while (sommeSuite < somme) {\n      iSuite++;\n      suite.push(nombres[iSuite]);\n      sommeSuite = sommeSuite + nombres[iSuite];\n    }\n\n    suiteATrouver = suite;\n    return sommeSuite === somme;\n  });\n  return suiteATrouver;\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour9.js"],"names":["input","nombresAll","split","map","a","parseInt","N","xmas","getNombreEtSommes","result1","console","log","nombres","sommes","getSommeKO","sommeKO","result2","suiteQuiFaitLaSomme","findSuite","Math","min","max","getResultats","isSommeOK","somme","nombresPlusPetit","filter","n","i","complementSomme","isComplementASomme","includes","length","nombresParN","push","splice","indexKO","some","nombresAsommer","suiteATrouver","sommeSuite","suite","iSuite"],"mappings":"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","sourcesContent":["import { input } from \"data/input9\"\r\n\r\nconst nombresAll = input.split(\"\\n\").map((a) => parseInt(a))\r\n\r\nconst N = 25\r\nconst xmas = getNombreEtSommes(nombresAll, N)\r\n\r\nfunction result1() {\r\n  console.log(xmas.nombres)\r\n  console.log(xmas.sommes)\r\n  return getSommeKO(xmas).sommeKO\r\n}\r\n\r\nfunction result2() {\r\n  const sommeKO = getSommeKO(xmas).sommeKO\r\n  const suiteQuiFaitLaSomme = findSuite(nombresAll, sommeKO)\r\n  return Math.min(...suiteQuiFaitLaSomme) + Math.max(...suiteQuiFaitLaSomme)\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n\r\nfunction isSommeOK(nombres, somme) {\r\n  const nombresPlusPetit = nombres.filter((n) => n <= somme)\r\n  nombresPlusPetit.map((a, i) => a)\r\n  const complementSomme = nombresPlusPetit.map((i) => somme - i)\r\n  const isComplementASomme = nombresPlusPetit.filter((i) =>\r\n    complementSomme.includes(i)\r\n  )\r\n  return isComplementASomme.length > 0\r\n}\r\n\r\nfunction getNombreEtSommes(nombres, N = 25) {\r\n  let nombresParN = []\r\n  for (let i = N; i < nombres.length; i++) {\r\n    nombresParN.push([...nombres].splice(i - N, N))\r\n  }\r\n  let sommes = [...nombres].splice(N, [...nombres].length - N)\r\n\r\n  return {\r\n    nombres: nombresParN,\r\n    sommes,\r\n  }\r\n}\r\n\r\nfunction getSommeKO(xmas) {\r\n  let sommeKO\r\n  let indexKO\r\n  xmas.sommes.some((somme, i) => {\r\n    indexKO = i\r\n    const nombresAsommer = xmas.nombres[i]\r\n    sommeKO = !isSommeOK(nombresAsommer, somme) && somme\r\n    return sommeKO\r\n  })\r\n  return { sommeKO, indexKO }\r\n}\r\n\r\nfunction findSuite(nombres, somme) {\r\n  let suiteATrouver\r\n  nombres.some((n, i) => {\r\n    let sommeSuite = n\r\n    let suite = [n]\r\n    let iSuite = i\r\n    while (sommeSuite < somme) {\r\n      iSuite++\r\n      suite.push(nombres[iSuite])\r\n      sommeSuite = sommeSuite + nombres[iSuite]\r\n    }\r\n    suiteATrouver = suite\r\n    return sommeSuite === somme\r\n  })\r\n\r\n  return suiteATrouver\r\n}\r\n"]},"metadata":{},"sourceType":"module"}