{"ast":null,"code":"import { input } from \"data/input14\";\nimport { reducerSum } from \"util/array\";\nimport { dec2bin, pad } from \"util/math\";\n\nfunction result1() {\n  const dataBrut = input.split(\"mask = \");\n  dataBrut.splice(0, 1);\n  const regex = new RegExp(\"^mem\\\\[([0-9]*)\\\\] = ([0-9]*)$\");\n  const data = dataBrut.map(a => {\n    const v = a.split(\"\\n\").filter(a => a !== \"\");\n    return v.map((b, i) => {\n      const r = i !== 0 ? {\n        adress: parseInt(regex.exec(b)[1]),\n        value: parseInt(applyMaskValue(pad(dec2bin(regex.exec(b)[2]), 36), v[0]), 2)\n      } : b;\n      return r;\n    });\n  });\n  const adresses = data.map(a => {\n    const aRetourner = a.filter((v, i) => i > 0);\n    return aRetourner;\n  }).flat(1).sort((a, b) => a.adress >= b.adress ? 1 : -1);\n  const adressesFiltered = adresses.filter((v, i) => i === adresses.length - 1 || v.adress !== adresses[i + 1].adress);\n  return adressesFiltered.map(a => a.value).reduce(reducerSum);\n}\n\nfunction result2() {\n  //duplication flemme...\n  const dataBrut = input.split(\"mask = \");\n  dataBrut.splice(0, 1);\n  const regex = new RegExp(\"^mem\\\\[([0-9]*)\\\\] = ([0-9]*)$\");\n  const data = dataBrut.map(a => {\n    const v = a.split(\"\\n\").filter(a => a !== \"\");\n    return v.map((b, i) => {\n      const r = i !== 0 ? {\n        adress: floatingToArray(applyMaskAdress(pad(dec2bin(parseInt(regex.exec(b)[1])), 36), v[0])).map(a => parseInt(a, 2)),\n        value: parseInt(regex.exec(b)[2])\n      } : b;\n      return r;\n    });\n  });\n  const adresses = data.map(a => {\n    const aRetourner = a.filter((v, i) => i > 0);\n    return aRetourner;\n  }).flat(1).map(a => {\n    const value = a.value;\n    return a.adress.map(adress => {\n      return {\n        adress,\n        value\n      };\n    });\n  }).flat().sort((a, b) => a.adress >= b.adress ? 1 : -1);\n  const adressesFiltered = adresses.filter((v, i) => i === adresses.length - 1 || v.adress !== adresses[i + 1].adress);\n  return adressesFiltered.map(a => a.value).reduce(reducerSum);\n}\n\nfunction applyMaskValue(value, mask) {\n  const maskArray = mask.split(\"\");\n  return value.split(\"\").map((a, i) => maskArray[i] === \"X\" ? a : maskArray[i]).join(\"\");\n}\n\nfunction applyMaskAdress(value, mask) {\n  const maskArray = mask.split(\"\");\n  return value.split(\"\").map((a, i) => maskArray[i] === \"0\" ? a : maskArray[i]).join(\"\");\n}\n\nfunction floatingToArray(value) {\n  const arrayX = value.split(\"\").map((a, i) => {\n    return a === \"X\" ? i : -1;\n  }).filter((a, i) => a >= 0);\n\n  if (!arrayX.length) {\n    return value;\n  } else {\n    const iX = arrayX[0];\n    let a = value.split(\"\");\n    let b = value.split(\"\");\n    a[iX] = \"0\";\n    b[iX] = \"1\";\n    return [floatingToArray(a.join(\"\")), floatingToArray(b.join(\"\"))].flat();\n  }\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour14.js"],"names":["input","reducerSum","dec2bin","pad","result1","dataBrut","split","splice","regex","RegExp","data","map","a","v","filter","b","i","r","adress","parseInt","exec","value","applyMaskValue","adresses","aRetourner","flat","sort","adressesFiltered","length","reduce","result2","floatingToArray","applyMaskAdress","mask","maskArray","join","arrayX","iX","getResultats"],"mappings":"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","sourcesContent":["import { input } from \"data/input14\"\r\nimport { reducerSum } from \"util/array\"\r\nimport { dec2bin, pad } from \"util/math\"\r\nfunction result1() {\r\n  const dataBrut = input.split(\"mask = \")\r\n  dataBrut.splice(0, 1)\r\n  const regex = new RegExp(\"^mem\\\\[([0-9]*)\\\\] = ([0-9]*)$\")\r\n  const data = dataBrut.map((a) => {\r\n    const v = a.split(\"\\n\").filter((a) => a !== \"\")\r\n    return v.map((b, i) => {\r\n      const r =\r\n        i !== 0\r\n          ? {\r\n              adress: parseInt(regex.exec(b)[1]),\r\n              value: parseInt(\r\n                applyMaskValue(pad(dec2bin(regex.exec(b)[2]), 36), v[0]),\r\n                2\r\n              ),\r\n            }\r\n          : b\r\n      return r\r\n    })\r\n  })\r\n  const adresses = data\r\n    .map((a) => {\r\n      const aRetourner = a.filter((v, i) => i > 0)\r\n      return aRetourner\r\n    })\r\n    .flat(1)\r\n    .sort((a, b) => (a.adress >= b.adress ? 1 : -1))\r\n\r\n  const adressesFiltered = adresses.filter(\r\n    (v, i) => i === adresses.length - 1 || v.adress !== adresses[i + 1].adress\r\n  )\r\n  return adressesFiltered.map((a) => a.value).reduce(reducerSum)\r\n}\r\nfunction result2() {\r\n  //duplication flemme...\r\n  const dataBrut = input.split(\"mask = \")\r\n  dataBrut.splice(0, 1)\r\n  const regex = new RegExp(\"^mem\\\\[([0-9]*)\\\\] = ([0-9]*)$\")\r\n  const data = dataBrut.map((a) => {\r\n    const v = a.split(\"\\n\").filter((a) => a !== \"\")\r\n    return v.map((b, i) => {\r\n      const r =\r\n        i !== 0\r\n          ? {\r\n              adress: floatingToArray(\r\n                applyMaskAdress(\r\n                  pad(dec2bin(parseInt(regex.exec(b)[1])), 36),\r\n                  v[0]\r\n                )\r\n              ).map((a) => parseInt(a, 2)),\r\n              value: parseInt(regex.exec(b)[2]),\r\n            }\r\n          : b\r\n      return r\r\n    })\r\n  })\r\n  const adresses = data\r\n    .map((a) => {\r\n      const aRetourner = a.filter((v, i) => i > 0)\r\n      return aRetourner\r\n    })\r\n    .flat(1)\r\n    .map((a) => {\r\n      const value = a.value\r\n      return a.adress.map((adress) => {\r\n        return {\r\n          adress,\r\n          value,\r\n        }\r\n      })\r\n    })\r\n    .flat()\r\n    .sort((a, b) => (a.adress >= b.adress ? 1 : -1))\r\n\r\n  const adressesFiltered = adresses.filter(\r\n    (v, i) => i === adresses.length - 1 || v.adress !== adresses[i + 1].adress\r\n  )\r\n  return adressesFiltered.map((a) => a.value).reduce(reducerSum)\r\n}\r\nfunction applyMaskValue(value, mask) {\r\n  const maskArray = mask.split(\"\")\r\n  return value\r\n    .split(\"\")\r\n    .map((a, i) => (maskArray[i] === \"X\" ? a : maskArray[i]))\r\n    .join(\"\")\r\n}\r\nfunction applyMaskAdress(value, mask) {\r\n  const maskArray = mask.split(\"\")\r\n  return value\r\n    .split(\"\")\r\n    .map((a, i) => (maskArray[i] === \"0\" ? a : maskArray[i]))\r\n    .join(\"\")\r\n}\r\n\r\nfunction floatingToArray(value) {\r\n  const arrayX = value\r\n    .split(\"\")\r\n    .map((a, i) => {\r\n      return a === \"X\" ? i : -1\r\n    })\r\n    .filter((a, i) => a >= 0)\r\n  if (!arrayX.length) {\r\n    return value\r\n  } else {\r\n    const iX = arrayX[0]\r\n    let a = value.split(\"\")\r\n    let b = value.split(\"\")\r\n    a[iX] = \"0\"\r\n    b[iX] = \"1\"\r\n    return [floatingToArray(a.join(\"\")), floatingToArray(b.join(\"\"))].flat()\r\n  }\r\n}\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}