{"ast":null,"code":"import { input } from \"../data/input1\"; // const input = ''\n\nconst data = input.split(\"\\n\").map(i => parseInt(i));\nconst dataComplement2020 = data.map(i => 2020 - i);\n\nfunction result1() {\n  const dataFin = data.filter(i => dataComplement2020.includes(i));\n  const result = dataFin[0] * (2020 - dataFin[0]);\n  return result;\n}\n\nfunction result2() {\n  let resultatFinal = [];\n  dataComplement2020.forEach((n, pos) => {\n    const dataComplementN = data.map(i => n - i);\n    const dataFin = data.filter(i => dataComplementN.includes(i));\n\n    if (dataFin[0]) {\n      resultatFinal = dataFin;\n    }\n  });\n  return resultatFinal[0] * resultatFinal[1] * (2020 - resultatFinal[0] - resultatFinal[1]);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour1.js"],"names":["input","data","split","map","i","parseInt","dataComplement2020","result1","dataFin","filter","includes","result","result2","resultatFinal","forEach","n","pos","dataComplementN","getResultats"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB,C,CACA;;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAuBC,CAAD,IAAOC,QAAQ,CAACD,CAAD,CAArC,CAAb;AACA,MAAME,kBAAkB,GAAGL,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAO,OAAOA,CAAvB,CAA3B;;AAEA,SAASG,OAAT,GAAmB;AACjB,QAAMC,OAAO,GAAGP,IAAI,CAACQ,MAAL,CAAaL,CAAD,IAAOE,kBAAkB,CAACI,QAAnB,CAA4BN,CAA5B,CAAnB,CAAhB;AACA,QAAMO,MAAM,GAAGH,OAAO,CAAC,CAAD,CAAP,IAAc,OAAOA,OAAO,CAAC,CAAD,CAA5B,CAAf;AACA,SAAOG,MAAP;AACD;;AACD,SAASC,OAAT,GAAmB;AACjB,MAAIC,aAAa,GAAG,EAApB;AACAP,EAAAA,kBAAkB,CAACQ,OAAnB,CAA2B,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACrC,UAAMC,eAAe,GAAGhB,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOW,CAAC,GAAGX,CAApB,CAAxB;AACA,UAAMI,OAAO,GAAGP,IAAI,CAACQ,MAAL,CAAaL,CAAD,IAAOa,eAAe,CAACP,QAAhB,CAAyBN,CAAzB,CAAnB,CAAhB;;AACA,QAAII,OAAO,CAAC,CAAD,CAAX,EAAgB;AACdK,MAAAA,aAAa,GAAGL,OAAhB;AACD;AACF,GAND;AAOA,SACEK,aAAa,CAAC,CAAD,CAAb,GACAA,aAAa,CAAC,CAAD,CADb,IAEC,OAAOA,aAAa,CAAC,CAAD,CAApB,GAA0BA,aAAa,CAAC,CAAD,CAFxC,CADF;AAKD;;AAED,eAAe,SAASK,YAAT,GAAwB;AACrC,SAAO,CAACX,OAAO,EAAR,EAAYK,OAAO,EAAnB,CAAP;AACD","sourcesContent":["import { input } from \"../data/input1\"\r\n// const input = ''\r\nconst data = input.split(\"\\n\").map((i) => parseInt(i))\r\nconst dataComplement2020 = data.map((i) => 2020 - i)\r\n\r\nfunction result1() {\r\n  const dataFin = data.filter((i) => dataComplement2020.includes(i))\r\n  const result = dataFin[0] * (2020 - dataFin[0])\r\n  return result\r\n}\r\nfunction result2() {\r\n  let resultatFinal = []\r\n  dataComplement2020.forEach((n, pos) => {\r\n    const dataComplementN = data.map((i) => n - i)\r\n    const dataFin = data.filter((i) => dataComplementN.includes(i))\r\n    if (dataFin[0]) {\r\n      resultatFinal = dataFin\r\n    }\r\n  })\r\n  return (\r\n    resultatFinal[0] *\r\n    resultatFinal[1] *\r\n    (2020 - resultatFinal[0] - resultatFinal[1])\r\n  )\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}