{"ast":null,"code":"import { input } from \"data/input19\";\nimport { get, isArray } from \"lodash\";\nimport { getArrayDepth, flatDeepBis, concatUnionArrays } from \"util/array\"; //PAS FINI :(\n\nfunction result1() {\n  const data = getData();\n  let messages = data.messages;\n  let rules = [];\n  data.rules.map(a => rules[a.i] = a.message); // let goodmessages = getMessages(0, rules, \"\")\n  // const d = getArrayDepth(goodmessages)\n  // goodmessages = goodmessages.flat(d)\n  // return messages.filter((m) => goodmessages.includes(m)).length\n}\n\nfunction result2() {\n  const data = getData();\n  let messages = data.messages;\n  const messageMax = Math.max(...messages.map(a => a.length));\n  let rules = [];\n  data.rules.map(a => rules[a.i] = a.message);\n  rules[8] = [[\"42\"], [\"42\", \"8\"]];\n  rules[11] = [[\"42\", \"31\"], [\"42\", \"11\", \"31\"]];\n  let goodmessages = getMessagesInfinite(0, rules, \"\", messageMax); // const d = getArrayDepth(goodmessages)\n  // debugger\n  // goodmessages = goodmessages.flat(5)\n\n  return messages.filter(m => goodmessages.includes(m)).length;\n}\n\nfunction getMessagesInfinite(rule, rules, prefix, max, count = 0) {\n  // debugger\n  if (typeof rules[rule][0][0] === \"string\" && /[a-z]+/.test(rules[rule][0][0])) {\n    return prefix + rules[rule][0][0];\n  } // if (count > 8) return prefix\n\n\n  return rules[rule].map(a => {\n    let result = \"\";\n    a.map(el => {\n      if (result.length <= max) result = concatUnionArrays(result, getMessagesInfinite(el, rules, prefix, max, count++));\n      return false;\n    });\n    return result;\n  }).flat(2);\n}\n\nfunction getMessages(rule, rules, prefix) {\n  if (typeof rules[rule][0][0] === \"string\" && /[a-z]+/.test(rules[rule][0][0])) {\n    return prefix + rules[rule][0][0];\n  }\n\n  return rules[rule].map(a => {\n    let result = \"\";\n    a.map(el => {\n      result = concatUnionArrays(result, getMessages(el, rules, prefix));\n      return false;\n    });\n    return result;\n  }).flat(2);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}\n\nfunction isAllMessage(array) {\n  return array.filter(a => !(typeof a === \"string\" && a.match(/[a-z]*/))).length === 0;\n}\n\nfunction isArrayOfNumber(array) {\n  return array.filter(a => !(typeof a === \"string\" && a.match(/[0-9]*/))).length === 0;\n}\n\nfunction getData() {\n  const inputs = input.split(\"\\n\\n\");\n  return {\n    rules: inputs[0].split(\"\\n\").map(r => {\n      const regex = /([0-9]*): (.*)/.exec(r);\n      return {\n        i: parseInt(regex[1]),\n        message: regex[2].replaceAll('\"', \"\").split(\" | \").map(a => a.split(\" \")).map(a => a.length <= 1 ? a.flat(2) : a)\n      };\n    }).sort((a, b) => a.i > b.i ? 1 : -1),\n    messages: inputs[1].split(\"\\n\")\n  };\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour19.js"],"names":["input","get","isArray","getArrayDepth","flatDeepBis","concatUnionArrays","result1","data","getData","messages","rules","map","a","i","message","result2","messageMax","Math","max","length","goodmessages","getMessagesInfinite","filter","m","includes","rule","prefix","count","test","result","el","flat","getMessages","getResultats","isAllMessage","array","match","isArrayOfNumber","inputs","split","r","regex","exec","parseInt","replaceAll","sort","b"],"mappings":"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","sourcesContent":["import { input } from \"data/input19\"\r\nimport { get, isArray } from \"lodash\"\r\nimport { getArrayDepth, flatDeepBis, concatUnionArrays } from \"util/array\"\r\n//PAS FINI :(\r\nfunction result1() {\r\n  const data = getData()\r\n  let messages = data.messages\r\n  let rules = []\r\n  data.rules.map((a) => (rules[a.i] = a.message))\r\n\r\n  // let goodmessages = getMessages(0, rules, \"\")\r\n\r\n  // const d = getArrayDepth(goodmessages)\r\n  // goodmessages = goodmessages.flat(d)\r\n\r\n  // return messages.filter((m) => goodmessages.includes(m)).length\r\n}\r\n\r\nfunction result2() {\r\n  const data = getData()\r\n  let messages = data.messages\r\n  const messageMax = Math.max(...messages.map((a) => a.length))\r\n  let rules = []\r\n  data.rules.map((a) => (rules[a.i] = a.message))\r\n  rules[8] = [[\"42\"], [\"42\", \"8\"]]\r\n  rules[11] = [\r\n    [\"42\", \"31\"],\r\n    [\"42\", \"11\", \"31\"],\r\n  ]\r\n  let goodmessages = getMessagesInfinite(0, rules, \"\", messageMax)\r\n\r\n  // const d = getArrayDepth(goodmessages)\r\n  // debugger\r\n  // goodmessages = goodmessages.flat(5)\r\n\r\n  return messages.filter((m) => goodmessages.includes(m)).length\r\n}\r\n\r\nfunction getMessagesInfinite(rule, rules, prefix, max, count = 0) {\r\n  // debugger\r\n  if (\r\n    typeof rules[rule][0][0] === \"string\" &&\r\n    /[a-z]+/.test(rules[rule][0][0])\r\n  ) {\r\n    return prefix + rules[rule][0][0]\r\n  }\r\n  // if (count > 8) return prefix\r\n  return rules[rule]\r\n    .map((a) => {\r\n      let result = \"\"\r\n      a.map((el) => {\r\n        if (result.length <= max)\r\n          result = concatUnionArrays(\r\n            result,\r\n            getMessagesInfinite(el, rules, prefix, max, count++)\r\n          )\r\n        return false\r\n      })\r\n      return result\r\n    })\r\n    .flat(2)\r\n}\r\n\r\nfunction getMessages(rule, rules, prefix) {\r\n  if (\r\n    typeof rules[rule][0][0] === \"string\" &&\r\n    /[a-z]+/.test(rules[rule][0][0])\r\n  ) {\r\n    return prefix + rules[rule][0][0]\r\n  }\r\n  return rules[rule]\r\n    .map((a) => {\r\n      let result = \"\"\r\n      a.map((el) => {\r\n        result = concatUnionArrays(result, getMessages(el, rules, prefix))\r\n        return false\r\n      })\r\n      return result\r\n    })\r\n    .flat(2)\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\nfunction isAllMessage(array) {\r\n  return (\r\n    array.filter((a) => !(typeof a === \"string\" && a.match(/[a-z]*/)))\r\n      .length === 0\r\n  )\r\n}\r\n\r\nfunction isArrayOfNumber(array) {\r\n  return (\r\n    array.filter((a) => !(typeof a === \"string\" && a.match(/[0-9]*/)))\r\n      .length === 0\r\n  )\r\n}\r\n\r\nfunction getData() {\r\n  const inputs = input.split(\"\\n\\n\")\r\n\r\n  return {\r\n    rules: inputs[0]\r\n      .split(\"\\n\")\r\n      .map((r) => {\r\n        const regex = /([0-9]*): (.*)/.exec(r)\r\n        return {\r\n          i: parseInt(regex[1]),\r\n          message: regex[2]\r\n            .replaceAll('\"', \"\")\r\n            .split(\" | \")\r\n            .map((a) => a.split(\" \"))\r\n            .map((a) => (a.length <= 1 ? a.flat(2) : a)),\r\n        }\r\n      })\r\n      .sort((a, b) => (a.i > b.i ? 1 : -1)),\r\n    messages: inputs[1].split(\"\\n\"),\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}