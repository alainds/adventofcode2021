{"ast":null,"code":"import { input } from \"data/input3\";\nimport { reducerSum, reducerMultiply, repeteData } from \"util/array\";\nconst dataBrut = input.split(\"\\n\");\n\nfunction result1() {\n  return calculNombreArbres(3, 1);\n}\n\nfunction result2() {\n  const slopes = [{\n    slopeX: 1,\n    slopeY: 1\n  }, {\n    slopeX: 3,\n    slopeY: 1\n  }, {\n    slopeX: 5,\n    slopeY: 1\n  }, {\n    slopeX: 7,\n    slopeY: 1\n  }, {\n    slopeX: 1,\n    slopeY: 2\n  }];\n  const nombreArbres = slopes.map(slope => calculNombreArbres(slope.slopeX, slope.slopeY));\n  return nombreArbres.reduce(reducerMultiply);\n}\n\nfunction calculNombreArbres(slopeX, slopeY) {\n  const data = dataBrut.map(row => row.split(\"\").map(i => i === \".\" ? 0 : 1));\n  const n = data[0].length;\n  const p = data.length;\n  const nRep = Math.trunc(p * slopeX / n) + 1;\n  const newData = repeteData(data, nRep);\n  let k = 0;\n  let j = 0;\n  let toboggan = [];\n\n  while (j < p - slopeY) {\n    k = k + slopeX;\n    j = j + slopeY;\n    toboggan.push(newData[j][k]);\n  }\n\n  return toboggan.reduce(reducerSum);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour3.js"],"names":["input","reducerSum","reducerMultiply","repeteData","dataBrut","split","result1","calculNombreArbres","result2","slopes","slopeX","slopeY","nombreArbres","map","slope","reduce","data","row","i","n","length","p","nRep","Math","trunc","newData","k","j","toboggan","push","getResultats"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,UAAtC,QAAwD,YAAxD;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,KAAN,CAAY,IAAZ,CAAjB;;AAEA,SAASC,OAAT,GAAmB;AACjB,SAAOC,kBAAkB,CAAC,CAAD,EAAI,CAAJ,CAAzB;AACD;;AAED,SAASC,OAAT,GAAmB;AACjB,QAAMC,MAAM,GAAG,CACb;AAAEC,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,MAAM,EAAE;AAArB,GADa,EAEb;AAAED,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAFa,EAGb;AAAED,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAHa,EAIb;AAAED,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAJa,EAKb;AAAED,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,MAAM,EAAE;AAArB,GALa,CAAf;AAOA,QAAMC,YAAY,GAAGH,MAAM,CAACI,GAAP,CAAYC,KAAD,IAC9BP,kBAAkB,CAACO,KAAK,CAACJ,MAAP,EAAeI,KAAK,CAACH,MAArB,CADC,CAArB;AAGA,SAAOC,YAAY,CAACG,MAAb,CAAoBb,eAApB,CAAP;AACD;;AAED,SAASK,kBAAT,CAA4BG,MAA5B,EAAoCC,MAApC,EAA4C;AAC1C,QAAMK,IAAI,GAAGZ,QAAQ,CAACS,GAAT,CAAcI,GAAD,IACxBA,GAAG,CAACZ,KAAJ,CAAU,EAAV,EAAcQ,GAAd,CAAmBK,CAAD,IAAQA,CAAC,KAAK,GAAN,GAAY,CAAZ,GAAgB,CAA1C,CADW,CAAb;AAGA,QAAMC,CAAC,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAlB;AACA,QAAMC,CAAC,GAAGL,IAAI,CAACI,MAAf;AACA,QAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAYH,CAAC,GAAGX,MAAL,GAAeS,CAA1B,IAA+B,CAA5C;AACA,QAAMM,OAAO,GAAGtB,UAAU,CAACa,IAAD,EAAOM,IAAP,CAA1B;AACA,MAAII,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,SAAOD,CAAC,GAAGN,CAAC,GAAGV,MAAf,EAAuB;AACrBe,IAAAA,CAAC,GAAGA,CAAC,GAAGhB,MAAR;AACAiB,IAAAA,CAAC,GAAGA,CAAC,GAAGhB,MAAR;AACAiB,IAAAA,QAAQ,CAACC,IAAT,CAAcJ,OAAO,CAACE,CAAD,CAAP,CAAWD,CAAX,CAAd;AACD;;AACD,SAAOE,QAAQ,CAACb,MAAT,CAAgBd,UAAhB,CAAP;AACD;;AAED,eAAe,SAAS6B,YAAT,GAAwB;AACrC,SAAO,CAACxB,OAAO,EAAR,EAAYE,OAAO,EAAnB,CAAP;AACD","sourcesContent":["import { input } from \"data/input3\"\r\nimport { reducerSum, reducerMultiply, repeteData } from \"util/array\"\r\n\r\nconst dataBrut = input.split(\"\\n\")\r\n\r\nfunction result1() {\r\n  return calculNombreArbres(3, 1)\r\n}\r\n\r\nfunction result2() {\r\n  const slopes = [\r\n    { slopeX: 1, slopeY: 1 },\r\n    { slopeX: 3, slopeY: 1 },\r\n    { slopeX: 5, slopeY: 1 },\r\n    { slopeX: 7, slopeY: 1 },\r\n    { slopeX: 1, slopeY: 2 },\r\n  ]\r\n  const nombreArbres = slopes.map((slope) =>\r\n    calculNombreArbres(slope.slopeX, slope.slopeY)\r\n  )\r\n  return nombreArbres.reduce(reducerMultiply)\r\n}\r\n\r\nfunction calculNombreArbres(slopeX, slopeY) {\r\n  const data = dataBrut.map((row) =>\r\n    row.split(\"\").map((i) => (i === \".\" ? 0 : 1))\r\n  )\r\n  const n = data[0].length\r\n  const p = data.length\r\n  const nRep = Math.trunc((p * slopeX) / n) + 1\r\n  const newData = repeteData(data, nRep)\r\n  let k = 0\r\n  let j = 0\r\n  let toboggan = []\r\n  while (j < p - slopeY) {\r\n    k = k + slopeX\r\n    j = j + slopeY\r\n    toboggan.push(newData[j][k])\r\n  }\r\n  return toboggan.reduce(reducerSum)\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}