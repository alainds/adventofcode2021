{"ast":null,"code":"import { input } from \"data/input12\"; //convention : East E>0, North N>0 (donc Weast W<0, south S<0) : coor : (0,0)\n\nconst coordonnees = input.split(\"\\n\").map(a => {\n  return {\n    dir: a.substr(0, 1),\n    value: parseInt(a.substr(1))\n  };\n});\n\nfunction result1() {\n  let coeffDirs = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n  let iCoeffDir = 0;\n  let coeffDir = coeffDirs[iCoeffDir];\n  let coordonneeActuelle = [0, 0];\n  coordonnees.map((coordonnee, index) => {\n    switch (coordonnee.dir) {\n      case \"E\":\n        coordonneeActuelle[0] = coordonneeActuelle[0] + coordonnee.value;\n        break;\n\n      case \"W\":\n        coordonneeActuelle[0] = coordonneeActuelle[0] - coordonnee.value;\n        break;\n\n      case \"N\":\n        coordonneeActuelle[1] = coordonneeActuelle[1] + coordonnee.value;\n        break;\n\n      case \"S\":\n        coordonneeActuelle[1] = coordonneeActuelle[1] - coordonnee.value;\n        break;\n\n      case \"L\":\n        iCoeffDir = (iCoeffDir + coordonnee.value / 90) % 4;\n        coeffDir = coeffDirs[iCoeffDir];\n        break;\n\n      case \"R\":\n        iCoeffDir = (coeffDirs.length + iCoeffDir - coordonnee.value / 90) % 4;\n        coeffDir = coeffDirs[iCoeffDir];\n        break;\n\n      case \"F\":\n        coordonneeActuelle = coordonneeActuelle.map((c, i) => c + coeffDir[i] * coordonnee.value);\n        break;\n\n      default:\n        break;\n    }\n\n    return 0;\n  });\n  return getManhattanDistance(coordonneeActuelle);\n}\n\nfunction result2() {\n  let waypoint = [10, 1];\n  let coordonneeActuelle = [0, 0];\n  coordonnees.map((coordonnee, index) => {\n    switch (coordonnee.dir) {\n      case \"E\":\n        waypoint[0] = waypoint[0] + coordonnee.value;\n        break;\n\n      case \"W\":\n        waypoint[0] = waypoint[0] - coordonnee.value;\n        break;\n\n      case \"N\":\n        waypoint[1] = waypoint[1] + coordonnee.value;\n        break;\n\n      case \"S\":\n        waypoint[1] = waypoint[1] - coordonnee.value;\n        break;\n\n      case \"L\":\n      case \"R\":\n        waypoint = rotateWaypoint(waypoint, coordonnee);\n        break;\n\n      case \"F\":\n        coordonneeActuelle = coordonneeActuelle.map((c, i) => c + coordonnee.value * waypoint[i]);\n        break;\n\n      default:\n        break;\n    }\n\n    return 0;\n  });\n  return getManhattanDistance(coordonneeActuelle);\n}\n\nexport default function getResultats() {\n  return [result1(), result2()];\n}\n\nconst getManhattanDistance = c => Math.abs(c[0]) + Math.abs(c[1]);\n\nconst rotateWaypoint = (waypoint, coordonnee) => {\n  let waypointClone = [...waypoint];\n  const quartVerslaGauche = coordonnee.dir === \"L\" ? 90 : 270;\n  const quartVerslaDroite = coordonnee.dir === \"R\" ? 90 : 270;\n\n  switch (coordonnee.value) {\n    case quartVerslaGauche:\n      //L90 R270\n      waypointClone[0] = waypoint[1] * -1;\n      waypointClone[1] = waypoint[0];\n      break;\n\n    case 180:\n      waypointClone = waypointClone.map((c, i) => -1 * c);\n      break;\n\n    case quartVerslaDroite:\n      //R90 L270\n      waypointClone[0] = waypoint[1];\n      waypointClone[1] = waypoint[0] * -1;\n      break;\n\n    default:\n      break;\n  }\n\n  return waypointClone;\n};","map":{"version":3,"sources":["d:/Dev/adventofcode2021/src/days/jour12.js"],"names":["input","coordonnees","split","map","a","dir","substr","value","parseInt","result1","coeffDirs","iCoeffDir","coeffDir","coordonneeActuelle","coordonnee","index","length","c","i","getManhattanDistance","result2","waypoint","rotateWaypoint","getResultats","Math","abs","waypointClone","quartVerslaGauche","quartVerslaDroite"],"mappings":"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","sourcesContent":["import { input } from \"data/input12\"\r\n\r\n//convention : East E>0, North N>0 (donc Weast W<0, south S<0) : coor : (0,0)\r\n\r\nconst coordonnees = input.split(\"\\n\").map((a) => {\r\n  return { dir: a.substr(0, 1), value: parseInt(a.substr(1)) }\r\n})\r\nfunction result1() {\r\n  let coeffDirs = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ]\r\n  let iCoeffDir = 0\r\n  let coeffDir = coeffDirs[iCoeffDir]\r\n  let coordonneeActuelle = [0, 0]\r\n\r\n  coordonnees.map((coordonnee, index) => {\r\n    switch (coordonnee.dir) {\r\n      case \"E\":\r\n        coordonneeActuelle[0] = coordonneeActuelle[0] + coordonnee.value\r\n        break\r\n      case \"W\":\r\n        coordonneeActuelle[0] = coordonneeActuelle[0] - coordonnee.value\r\n        break\r\n      case \"N\":\r\n        coordonneeActuelle[1] = coordonneeActuelle[1] + coordonnee.value\r\n        break\r\n      case \"S\":\r\n        coordonneeActuelle[1] = coordonneeActuelle[1] - coordonnee.value\r\n        break\r\n\r\n      case \"L\":\r\n        iCoeffDir = (iCoeffDir + coordonnee.value / 90) % 4\r\n        coeffDir = coeffDirs[iCoeffDir]\r\n        break\r\n      case \"R\":\r\n        iCoeffDir = (coeffDirs.length + iCoeffDir - coordonnee.value / 90) % 4\r\n        coeffDir = coeffDirs[iCoeffDir]\r\n        break\r\n      case \"F\":\r\n        coordonneeActuelle = coordonneeActuelle.map(\r\n          (c, i) => c + coeffDir[i] * coordonnee.value\r\n        )\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n    return 0\r\n  })\r\n  return getManhattanDistance(coordonneeActuelle)\r\n}\r\n\r\nfunction result2() {\r\n  let waypoint = [10, 1]\r\n  let coordonneeActuelle = [0, 0]\r\n\r\n  coordonnees.map((coordonnee, index) => {\r\n    switch (coordonnee.dir) {\r\n      case \"E\":\r\n        waypoint[0] = waypoint[0] + coordonnee.value\r\n        break\r\n      case \"W\":\r\n        waypoint[0] = waypoint[0] - coordonnee.value\r\n        break\r\n      case \"N\":\r\n        waypoint[1] = waypoint[1] + coordonnee.value\r\n        break\r\n      case \"S\":\r\n        waypoint[1] = waypoint[1] - coordonnee.value\r\n        break\r\n      case \"L\":\r\n      case \"R\":\r\n        waypoint = rotateWaypoint(waypoint, coordonnee)\r\n        break\r\n      case \"F\":\r\n        coordonneeActuelle = coordonneeActuelle.map(\r\n          (c, i) => c + coordonnee.value * waypoint[i]\r\n        )\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n    return 0\r\n  })\r\n  return getManhattanDistance(coordonneeActuelle)\r\n}\r\n\r\nexport default function getResultats() {\r\n  return [result1(), result2()]\r\n}\r\n\r\nconst getManhattanDistance = (c) => Math.abs(c[0]) + Math.abs(c[1])\r\n\r\nconst rotateWaypoint = (waypoint, coordonnee) => {\r\n  let waypointClone = [...waypoint]\r\n  const quartVerslaGauche = coordonnee.dir === \"L\" ? 90 : 270\r\n  const quartVerslaDroite = coordonnee.dir === \"R\" ? 90 : 270\r\n  switch (coordonnee.value) {\r\n    case quartVerslaGauche: //L90 R270\r\n      waypointClone[0] = waypoint[1] * -1\r\n      waypointClone[1] = waypoint[0]\r\n      break\r\n    case 180:\r\n      waypointClone = waypointClone.map((c, i) => -1 * c)\r\n      break\r\n    case quartVerslaDroite: //R90 L270\r\n      waypointClone[0] = waypoint[1]\r\n      waypointClone[1] = waypoint[0] * -1\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  return waypointClone\r\n}\r\n"]},"metadata":{},"sourceType":"module"}